rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions for validation
    function hasValidMetadata() {
      return request.resource.metadata != null && 
             request.resource.metadata.customMetadata != null &&
             request.resource.metadata.customMetadata.userId == request.auth.uid;
    }
    
    function isValidFileType() {
      // Allow common document formats
      return request.resource.contentType.matches('application/pdf') || 
             request.resource.contentType.matches('application/vnd.openxmlformats-officedocument.wordprocessingml.document') || // docx
             request.resource.contentType.matches('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet') || // xlsx
             request.resource.contentType.matches('application/vnd.ms-excel') || // xls
             request.resource.contentType.matches('text/csv') || 
             request.resource.contentType.matches('image/.*');
    }
    
    function isValidFileSize() {
      // Limit file size to 20MB
      return request.resource.size <= 20 * 1024 * 1024;
    }

    // Allow user-specific reads for better security
    match /users/{userId}/{allPaths=**} {
      // Only allow users to read their own files
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Allow uploads with valid file type and size, metadata is optional
      allow create: if request.auth != null && 
                     request.auth.uid == userId && 
                     isValidFileType() && 
                     isValidFileSize() && 
                     (hasValidMetadata() || true); // Make metadata validation optional
      
      // Allow updates and deletes for file owners
      allow update, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Public files section (if needed)
    match /public/{allPublicPaths=**} {
      // Anyone can read public files
      allow read;
      
      // Only authenticated users can upload to public folder
      allow create: if request.auth != null && 
                    isValidFileType() && 
                    isValidFileSize() && 
                    (hasValidMetadata() || true); // Make metadata validation optional
      
      // Only the original uploader can modify or delete their files
      allow update, delete: if request.auth != null && 
                            request.resource.metadata != null && 
                            request.resource.metadata.customMetadata != null &&
                            request.resource.metadata.customMetadata.userId == request.auth.uid;
    }
    
    // Default deny for everything else
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
