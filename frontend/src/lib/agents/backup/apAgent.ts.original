import { Agent, AgentContext, AgentResponse } from "@/types/agents";
import { sql } from '@vercel/postgres';
import Anthropic from '@anthropic-ai/sdk';
import { 
  mightBeAboutAP, 
  findRelevantVendors, 
  findRelevantBills,
  isVendorCreationQuery,
  extractVendorInfoFromQuery,
  isBillCreationQuery,
  extractBillInfoFromQuery,
  isBillStatusUpdateQuery, 
  BillStatusAnalysis, 
  isBillPaymentQuery,
  extractPaymentInfoFromQuery, // Renamed from extractPaymentInfo
  // getVendors, // Removed: Imported directly from vendorQueries later
  getBills, 
  // normalizeText, // Removed: Not exported from apUtils
  // getAccountById, // Removed: Not exported from apUtils
  getAccounts 
  // findBestMatchingAccount // Removed: Not exported from apUtils
} from "@/lib/apUtils";
import { 
  sendAgentMessage, 
  respondToAgentMessage, 
  AgentMessageType, 
  MessagePriority, 
  MessageStatus,
  getMessageById
} from "@/lib/agentCommunication";
import { extractBillInfoWithAI, analyzeBillStatusUpdateWithAI, BillStatusUpdateInfo } from "@/lib/aiExtraction";
import { logAuditEvent } from "@/lib/auditLogger";
import Anthropic from "@anthropic-ai/sdk";
import { MessageParam } from "@anthropic-ai/sdk/resources/messages";
import { Vendor } from "../accounting/vendorQueries";
import { Bill, BillWithVendor } from "../accounting/billQueries";
import { Account } from "../accounting/accountQueries";
import { BillLine } from "../accounting/billQueries";
import { BillWithDetails, BillLineDetail } from "../accounting/apQueries";
import { createVendor as createVendorRecord, getVendorByName, getVendors } from "@/lib/accounting/vendorQueries";
import { createBill, updateBill, getBill } from "@/lib/accounting/billQueries";
import { 
  isStatementProcessed, 
  recordProcessedStatement, 
  hasStartingBalanceStatement, 
  findStatementByAccountIdentifiers 
} from '@/lib/accounting/statementTracker';
import type { CreateBulkBillPaymentsData } from '@/lib/accounting/apQueries'; // Added for bulk payment
import { checkStatementStatus, processStatementViaApi } from '@/lib/accounting/statementUtils';

// Define an interface for the information passed from processRequest to handleBillStatusUpdate
interface AdaptedBillStatusInfo {
  isUpdateRequest: boolean;
  requestedStatus?: string; // Made optional
  billNumbers: string[];
  isBulkUpdate?: boolean;   // Made optional
  // We can add limitToRecent and vendorName here if processRequest starts populating them in legacyUpdateInfoAdapter
}

// Simple in-memory store for pending vendor creation info keyed by user
const pendingVendorCreation: Record<string, Partial<ReturnType<typeof extractVendorInfoFromQuery>>> = {};

/**
 * APAgent specializes in handling Accounts Payable related queries
 * It provides information about vendors, bills, payments, and AP workflows
 */
export class APAgent implements Agent {
  id = "ap_agent";
  name = "Accounts Payable Agent";
  description = "Handles queries about vendors, bills, and accounts payable workflows";
  
  // Track statement processing information
  private pendingStatementProcessing: Record<string, {
    accountId: number;
    accountCode: string;
    accountName: string;
    statementNumber: string;
    statementDate: string;
    lastFour: string;
    balance: number;
    isStartingBalance: boolean;
  }> = {};
  
  // Track the last duplicate vendor warning to handle confirmations
  private lastDuplicateWarning: { userId: string, vendorName: string, vendorInfo: any } | null = null;
  
  // Track the pending bill creation to handle confirmations
  private pendingBillCreation: { userId: string, billInfo: any, vendorId?: number } | null = null;

  // State for multi-turn payment processing when awaiting a payment account
  private isAwaitingPaymentAccount: boolean = false;
  private pendingPaymentDetails: {
    billIds: number[];
    paymentDate: string;
    paymentAmount?: number;
    vendorName?: string; 
    allBills?: boolean;
    // Add any other details extracted that might be useful for confirmation or processing
  } | null = null;
  
  private anthropic: Anthropic;

  constructor() {
    this.anthropic = new Anthropic({
      apiKey: process.env.ANTHROPIC_API_KEY || '',
    });
  }
  
  /**
   * Determine if this agent can handle the given query
   * @param query The user's query
   * @returns Promise<boolean> indicating if this agent can handle the query
   */
  async canHandle(query: string): Promise<boolean> {
    // Normalize the query for consistent matching
    const normalizedQuery = query.toLowerCase().trim();
    
    // Check for pending operations first
    const hasPendingVendors = this.lastDuplicateWarning !== null;
    const hasPendingBill = this.pendingBillCreation !== null;
    
    // If we have pending operations, we should handle the query
    if (hasPendingVendors || hasPendingBill) {
      return true;
    }
    
    // Use AI to determine if the query is about accounts payable
    try {
      return await mightBeAboutAP(normalizedQuery);
    } catch (error) {
      console.error('[APAgent.canHandle] Error:', error);
      // Fallback to simple keyword matching if AI fails
      return normalizedQuery.includes('vendor') || 
             normalizedQuery.includes('bill') || 
             normalizedQuery.includes('invoice') || 
             normalizedQuery.includes('payment') ||
             normalizedQuery.includes('accounts payable') ||
             normalizedQuery.includes('ap ');
    }
  }
  
  /**
   * Use AI to find the best matching account from a list of potential accounts
   * @param accountName The account name or identifier to match
   * @param accounts List of potential account matches
   * @returns Object with accountId (if found) and exactMatch flag
   */
  async findBestAccountMatchWithAI(accountName: string | null, accounts: any[]): Promise<{ accountId: number | null, exactMatch: boolean }> {
    if (!accountName || accounts.length === 0) {
      return { accountId: null, exactMatch: false };
    }
    
    try {
      // Format account options for the AI
      const accountOptions = accounts.map(acc => ({
        id: acc.id,
        name: acc.name,
        code: acc.code || '',
        type: acc.type || '',
        subtype: acc.subtype || ''
      }));
      
      // Define the system prompt
      const systemPrompt = `You are an AI assistant helping with accounting tasks. 
      Your job is to find the best matching account from a list based on a given name or description.
      You should return a JSON object with:
      - accountId: The ID of the best matching account, or null if no good match is found
      - exactMatch: Boolean indicating if this is an exact match (true) or approximate match (false)
      - confidence: A number between 0-100 indicating your confidence in the match
      
      Rules for matching:
      1. Exact matches on name or code should have 100% confidence
      2. Close matches (minor spelling differences, abbreviations) should have 70-99% confidence
      3. Partial word matches should have 40-69% confidence
      4. If confidence is below 40%, return null for accountId
      5. Consider account type and subtype in your matching logic
      6. Return only the JSON object, nothing else`;
      
      // Call the AI to find the best match
      const response = await this.anthropic.messages.create({
        model: "claude-3-haiku-20240307",
        max_tokens: 150,
        system: systemPrompt,
        messages: [{ 
          role: "user", 
          content: `Find the best account match for "${accountName}" from these options: ${JSON.stringify(accountOptions)}` 
        }],
      });
      
      // Parse the response
      const content = response.content[0].text;
      const match = JSON.parse(content);
      
      console.log(`[APAgent] AI account matching result for "${accountName}": `, match);
      
      // Return the match result
      return {
        accountId: match.confidence >= 40 ? match.accountId : null,
        exactMatch: match.exactMatch
      };
    } catch (error) {
      console.error('[APAgent.findBestAccountMatchWithAI] Error:', error);
      
      // Fallback to simple string matching
      const exactMatch = accounts.find(acc => 
        acc.name.toLowerCase() === accountName.toLowerCase() || 
        (acc.code && acc.code.toLowerCase() === accountName.toLowerCase())
      );
      
      if (exactMatch) {
        return { accountId: exactMatch.id, exactMatch: true };
      }
      
      // Try partial matching
      const partialMatch = accounts.find(acc => 
        acc.name.toLowerCase().includes(accountName.toLowerCase()) || 
        (acc.code && acc.code.toLowerCase().includes(accountName.toLowerCase()))
      );
      
      return { 
        accountId: partialMatch ? partialMatch.id : null, 
        exactMatch: false 
      };
    }
  }
  
  /**
   * Use AI to find the best matching vendor from a list of potential vendors
   * @param vendorName The vendor name to match
   * @param vendors List of potential vendor matches
   * @returns Object with vendorId (if found), exactMatch flag, and confidence score
   */
  async findBestVendorMatchWithAI(vendorName: string, vendorOptions: any[]): Promise<{ vendorId: number | null, exactMatch: boolean, confidence: number }> {
    if (!vendorName || vendorOptions.length === 0) {
      return { vendorId: null, exactMatch: false, confidence: 0 };
    }
    
    try {
      // Define the system prompt
      const systemPrompt = `You are an AI assistant helping with accounting tasks. 
      Your job is to find the best matching vendor from a list based on a given vendor name.
      You should return a JSON object with:
      - vendorId: The ID of the best matching vendor, or null if no good match is found
      - exactMatch: Boolean indicating if this is an exact match (true) or approximate match (false)
      - confidence: A number between 0-100 indicating your confidence in the match
      
      Rules for matching:
      1. Exact matches on name should have 100% confidence
      2. Close matches (minor spelling differences, abbreviations) should have 70-99% confidence
      3. Partial word matches should have 40-69% confidence
      4. If confidence is below 40%, return null for vendorId
      5. Consider common vendor name variations (Inc., LLC, Co., etc.)
      6. Return only the JSON object, nothing else`;
      
      // Call the AI to find the best match
      const response = await this.anthropic.messages.create({
        model: "claude-3-haiku-20240307",
        max_tokens: 150,
        system: systemPrompt,
        messages: [{ 
          role: "user", 
          content: `Find the best vendor match for "${vendorName}" from these options: ${JSON.stringify(vendorOptions)}` 
        }],
      });
      
      // Parse the response
      const content = response.content[0].text;
      const match = JSON.parse(content);
      
      console.log(`[APAgent] AI vendor matching result for "${vendorName}": `, match);
      
      // Return the match result
      return {
        vendorId: match.confidence >= 40 ? match.vendorId : null,
        exactMatch: match.exactMatch,
        confidence: match.confidence
      };
    } catch (error) {
      console.error('[APAgent.findBestVendorMatchWithAI] Error:', error);
      
      // Fallback to simple string matching
      const normalizedVendorName = vendorName.toLowerCase().trim();
      
      // Try exact match first
      const exactMatch = vendorOptions.find(vendor => 
        vendor.name.toLowerCase() === normalizedVendorName
      );
      
      if (exactMatch) {
        return { vendorId: exactMatch.id, exactMatch: true, confidence: 100 };
      }
      
      // Try partial matching
      const partialMatch = vendorOptions.find(vendor => 
        vendor.name.toLowerCase().includes(normalizedVendorName) || 
        normalizedVendorName.includes(vendor.name.toLowerCase())
      );
      
      return { 
        vendorId: partialMatch ? partialMatch.id : null, 
        exactMatch: false,
        confidence: partialMatch ? 50 : 0
      };
    }
  }

  /**
   * Use AI to intelligently allocate a payment amount across multiple bills
   * @param bills Array of bills to allocate payment to
   * @param totalPaymentAmount Total payment amount to allocate
   * @returns Object with allocated amounts per bill ID
   */
  async allocatePaymentWithAI(bills: any[], totalPaymentAmount: number): Promise<Record<number, number>> {
    if (!bills || bills.length === 0) {
      return {};
    }
    
    if (bills.length === 1) {
      // If only one bill, allocate the entire amount to it
      return { [bills[0].id]: totalPaymentAmount };
    }
    
    try {
      // Format bill data for the AI
      const billsData = bills.map(bill => ({
        id: bill.id,
        vendor: bill.vendor_name || 'Unknown Vendor',
        amount: bill.amount || 0,
        due_date: bill.due_date || 'Unknown',
        bill_number: bill.bill_number || '',
        days_overdue: bill.days_overdue || 0,
        status: bill.status || 'pending'
      }));
      
      // Define the system prompt
      const systemPrompt = `You are an AI assistant helping with accounting tasks. 
      Your job is to intelligently allocate a payment amount across multiple bills.
      
      Rules for allocation:
      1. Prioritize bills that are overdue, with those overdue the longest getting highest priority
      2. If possible, pay bills in full rather than partial payments
      3. If partial payments are necessary, allocate in a way that maximizes the number of bills that can be fully paid
      4. Consider the vendor relationships - try to maintain good standing with all vendors
      5. Return a JSON object with bill IDs as keys and allocated amounts as values
      
      The total allocated amount must equal the total payment amount provided.`;
      
      // Call the AI to allocate the payment
      const response = await this.anthropic.messages.create({
        model: "claude-3-haiku-20240307",
        max_tokens: 500,
        system: systemPrompt,
        messages: [{ 
          role: "user", 
          content: `Allocate a payment of $${totalPaymentAmount.toFixed(2)} across these bills: ${JSON.stringify(billsData)}` 
        }],
      });
      
      // Parse the response
      const content = response.content[0].text;
      const allocation = JSON.parse(content);
      
      console.log(`[APAgent] AI payment allocation result:`, allocation);
      
      // Validate the allocation
      let totalAllocated = 0;
      const validatedAllocation: Record<number, number> = {};
      
      // Ensure all allocations are valid numbers and bill IDs exist
      for (const [billId, amount] of Object.entries(allocation)) {
        const numericBillId = parseInt(billId, 10);
        const numericAmount = parseFloat(amount as string);
        
        if (!isNaN(numericBillId) && !isNaN(numericAmount) && numericAmount > 0) {
          validatedAllocation[numericBillId] = numericAmount;
          totalAllocated += numericAmount;
        }
      }
      
      // Check if the total allocated amount matches the payment amount
      const tolerance = 0.01; // Allow for small rounding differences
      if (Math.abs(totalAllocated - totalPaymentAmount) > tolerance) {
        console.warn(`[APAgent] AI allocation total ($${totalAllocated.toFixed(2)}) doesn't match payment amount ($${totalPaymentAmount.toFixed(2)}). Using proportional allocation.`);
        return this.allocatePaymentProportionally(bills, totalPaymentAmount);
      }
      
      return validatedAllocation;
    } catch (error) {
      console.error('[APAgent] Error allocating payment with AI:', error);
      // Fallback to proportional allocation
      return this.allocatePaymentProportionally(bills, totalPaymentAmount);
    }
  }
  
  /**
   * Fallback method to allocate payment proportionally across bills based on their amounts
   * @param bills Array of bills to allocate payment to
   * @param totalPaymentAmount Total payment amount to allocate
   * @returns Object with allocated amounts per bill ID
   */
  private allocatePaymentProportionally(bills: any[], totalPaymentAmount: number): Record<number, number> {
    const allocation: Record<number, number> = {};
    
    // Calculate total bill amount
    const totalBillAmount = bills.reduce((sum, bill) => sum + (parseFloat(bill.amount) || 0), 0);
    
    if (totalBillAmount <= 0) {
      // If total bill amount is zero or negative, distribute equally
      const equalAmount = totalPaymentAmount / bills.length;
      bills.forEach(bill => {
        allocation[bill.id] = equalAmount;
      });
      return allocation;
    }
    
    // Allocate proportionally based on bill amounts
    bills.forEach(bill => {
      const billAmount = parseFloat(bill.amount) || 0;
      const proportion = billAmount / totalBillAmount;
      allocation[bill.id] = Math.min(billAmount, totalPaymentAmount * proportion);
    });
    
    return allocation;
  }
  
  // --- Bulk Payment --- 
  public async bulkPayVendorBills(params: {
    billIds: number[];
    paymentDate: string;
    paymentAccountId: number;
    paymentMethod?: string;
    referenceNumber?: string;
    paymentAmount?: number; // Optional total payment amount
    userId: string; // For logging and context
    token?: string; // For API authentication
  }): Promise<{
    success: boolean;
    message: string;
    data?: {
      successes: Array<{ billId: number; paymentId: number; message: string }>;
      failures: Array<{ billId: number; error: string }>;
      summary: string;
    };
  }> {
    const { billIds, paymentDate, paymentAccountId, paymentMethod, referenceNumber, paymentAmount, userId, token } = params;

    await logAuditEvent({
      user_id: userId,
      action_type: "BULK_PAY_BILLS_AGENT",
      entity_type: "PAYMENT_BATCH",
      entity_id: `batch-${Date.now()}`,
      context: { billIds, paymentAccountId, agentId: this.id },
      status: "ATTEMPT",
      timestamp: new Date().toISOString()
    });

    try {
      // If a specific payment amount is provided and there are multiple bills, use AI to allocate it
      let paymentAllocation: Record<number, number> | undefined;
      
      if (paymentAmount && billIds.length > 1) {
        try {
          // Fetch bill details to make intelligent allocation decisions
          const baseUrl = process.env.NEXT_PUBLIC_APP_URL || process.env.APP_URL || 'http://localhost:3000';
          const billsApiUrl = new URL(`/api/bills?ids=${billIds.join(',')}&userId=${userId}`, baseUrl).toString();
          
          const billsResponse = await fetch(billsApiUrl, {
            headers: token ? { Authorization: `Bearer ${token}` } : {}
          });
          
          if (billsResponse.ok) {
            const bills = await billsResponse.json();
            if (Array.isArray(bills) && bills.length > 0) {
              // Use AI to allocate the payment amount across bills
              paymentAllocation = await this.allocatePaymentWithAI(bills, paymentAmount);
              console.log('[APAgent] Using AI-powered payment allocation:', paymentAllocation);
            }
          } else {
            console.error('[APAgent] Failed to fetch bills for AI allocation:', await billsResponse.text());
          }
        } catch (error) {
          console.error('[APAgent] Error during payment allocation:', error);
          // Continue without AI allocation if there's an error
        }
      }
      
      // Create the payload with the base properties
      const payload: any = {
        billIds,
        paymentDate,
        paymentAccountId,
        paymentMethod,
        referenceNumber
      };
      
      // Add optional payment amount and allocation if available
      if (paymentAmount !== undefined) {
        payload.paymentAmount = paymentAmount;
      }
      
      if (paymentAllocation) {
        payload.paymentAllocation = paymentAllocation;
      }

      const baseUrl = process.env.NEXT_PUBLIC_APP_URL || process.env.APP_URL || 'http://localhost:3000';
      const apiUrl = new URL('/api/ap/bulk-pay-bills', baseUrl).toString();
      console.log(`[APAgent.bulkPayVendorBills] Auth token being used:`, token ? token.substring(0, 20) + '...' : 'undefined'); // Log token existence/prefix
      console.log(`[APAgent.bulkPayVendorBills] Calling API: ${apiUrl} with payload:`, JSON.stringify(payload));
    const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          ...(token && { 'Authorization': `Bearer ${token}` }),
        },
        body: JSON.stringify(payload),
      });

      const responseData = await response.json();

      if (!response.ok) {
        const errorMessage = responseData.error || responseData.message || `API error: ${response.status}`;
        await logAuditEvent({
          user_id: userId,
          action_type: "BULK_PAY_BILLS_AGENT",
          entity_type: "PAYMENT_BATCH",
          entity_id: `batch-${Date.now()}`,
          context: { billIds, paymentAccountId, error: errorMessage, agentId: this.id },
          status: "FAILURE",
          timestamp: new Date().toISOString()
        });
        return {
          success: false,
          message: `Failed to process bulk bill payments: ${errorMessage}`,
          data: responseData.failures && responseData.successes ? responseData : undefined
        };
      }
      
      await logAuditEvent({
        user_id: userId,
        action_type: "BULK_PAY_BILLS_AGENT",
        entity_type: "PAYMENT_BATCH",
        entity_id: `batch-${Date.now()}`,
        context: { billIds, paymentAccountId, agentId: this.id, successes: responseData.successes?.length, failures: responseData.failures?.length },
        status: "SUCCESS",
        timestamp: new Date().toISOString()
      });

      let userMessage = responseData.summary || "Bulk payment processed.";
      if (responseData.failures && responseData.failures.length > 0) {
        userMessage += ` Some payments failed.`;
      }
      if (responseData.successes && responseData.successes.length > 0) {
        userMessage += ` ${responseData.successes.length} bills paid successfully.`;
      }

      return {
        success: true, // Overall API call was successful, details in data
        message: userMessage,
        data: responseData,
      };
    } catch (error) {
      console.error('[APAgent] Error calling bulkPayVendorBills API:', error);
      const errMessage = error instanceof Error ? error.message : 'An unknown error occurred.';
      await logAuditEvent({
        user_id: userId,
        action_type: "BULK_PAY_BILLS_AGENT",
        entity_type: "PAYMENT_BATCH",
        entity_id: `batch-${Date.now()}`,
        context: { billIds, paymentAccountId, error: errMessage, agentId: this.id },
        status: "FAILURE",
        timestamp: new Date().toISOString()
      });
      return {
        success: false,
        message: `An error occurred while initiating bulk payment: ${errMessage}`,
      };
    }
  }

  private async _handleAwaitingPaymentAccount(context: AgentContext): Promise<AgentResponse> {
    const { query, userId } = context; // anthropic is this.anthropic
    console.log(`[APAgent] Attempting to handle query while awaiting payment account: "${query}"`);

    // Attempt to extract account information from the current query
    // extractPaymentInfoFromQuery is synchronous and expects only the query string.
    // Note: The current version of extractPaymentInfoFromQuery does not use AI/anthropic, nor userId.
    const paymentInfoObject = extractPaymentInfoFromQuery(query);
    
    let paymentAccountIdToUse: number | undefined = undefined;
    let accountNameFromQuery = paymentInfoObject.payment_account;

    if (accountNameFromQuery) { 
      // IMPORTANT: getAccounts currently does NOT filter by userId. This needs to be addressed for data isolation.
      const potentialPaymentAccounts = await getAccounts({ types: ['bank', 'credit_card', 'asset'], userId: context.userId });
      
      // Use AI to find the best matching account
      const matchResult = await this.findBestAccountMatchWithAI(accountNameFromQuery, potentialPaymentAccounts);
      
      if (matchResult.accountId) {
        // Found a matching account
        paymentAccountIdToUse = matchResult.accountId;
        const matchedAccount = potentialPaymentAccounts.find(acc => acc.id === paymentAccountIdToUse);
        console.log(`[APAgent] AI found ${matchResult.exactMatch ? 'exact' : 'close'} account match: ${matchedAccount?.name} (ID: ${paymentAccountIdToUse})`);
      } else {
        // No good match found - check if there are partial matches to suggest
        const partialMatches = potentialPaymentAccounts.filter(acc => 
          acc.name.toLowerCase().includes(accountNameFromQuery!.toLowerCase()) ||
          (acc.code && acc.code.toLowerCase().includes(accountNameFromQuery!.toLowerCase()))
        );
        
        if (partialMatches.length > 1) {
          this.isAwaitingPaymentAccount = false; 
          this.pendingPaymentDetails = null;
          const accountOptions = partialMatches.map(acc => `${acc.name} (Code: ${acc.code || 'N/A'}, ID: ${acc.id})`).join('; ');
          return {
            success: true,
            message: `I found multiple accounts that might match '${accountNameFromQuery}': ${accountOptions}. Please try recording the payment again and specify the account by its ID or a more unique name/code.`,
            interactionType: 'clarification_needed',
          };
        } else {
          // Try direct ID matching as a last resort
          const potentialId = parseInt(query.trim(), 10);
          if (!isNaN(potentialId)) {
            const accountById = potentialPaymentAccounts.find(acc => acc.id === potentialId);
            if (accountById) {
                paymentAccountIdToUse = accountById.id;
                console.log(`[APAgent] Found account by ID: ${accountById.name} (ID: ${paymentAccountIdToUse})`);
            }
        }

        if (!paymentAccountIdToUse) {
          return {
            success: true,
            message: `I couldn't find an account matching "${query}". Please provide the account name, code, or ID. You can also ask me to list payment accounts or say 'cancel' to stop.`,
            interactionType: 'clarification_needed_reprompt_account',
          };
        }
      }
    }
    
    if (query.toLowerCase() === 'cancel') {
        this.isAwaitingPaymentAccount = false;
        this.pendingPaymentDetails = null;
        return { success: true, message: "Okay, I've cancelled the pending payment operation.", interactionType: 'action_cancelled' };
    } else {
      const pendingDetails = this.pendingPaymentDetails;
      let billContextMessage = 'the previously mentioned bills';
      if (pendingDetails) {
        if (pendingDetails.allBills) billContextMessage = "all open bills";
        else if (pendingDetails.vendorName) billContextMessage = `bills for ${pendingDetails.vendorName}`;
        else if (pendingDetails.billIds.length === 1) billContextMessage = `bill ID ${pendingDetails.billIds[0]}`;
        else if (pendingDetails.billIds.length > 1) billContextMessage = `those ${pendingDetails.billIds.length} bills`;
      }
      return {
          success: true,
          message: `I'm still waiting for the payment account for ${billContextMessage}. Which account should I use? You can also say 'cancel'.`,
          interactionType: 'clarification_needed_reprompt_account',
      };
    }

    if (paymentAccountIdToUse && this.pendingPaymentDetails) {
      console.log(`[APAgent] Payment account ID ${paymentAccountIdToUse} obtained. Proceeding with pending payment for bills: ${this.pendingPaymentDetails.billIds.join(', ')}`);
      const result = await this.bulkPayVendorBills({
        ...this.pendingPaymentDetails,
        paymentAccountId: paymentAccountIdToUse,
        userId,
        token: context.token,
      });

      this.isAwaitingPaymentAccount = false;
      this.pendingPaymentDetails = null;

      return {
        success: result.success,
        message: result.message,
        data: result.data,
        interactionType: 'payment_processed',
      };
    }
    
    // Fallback, should ideally not be reached if logic above is exhaustive for an awaited account state.
    console.warn(`[APAgent] _handleAwaitingPaymentAccount unexpected fallthrough for query: "${query}". Clearing state.`);
    this.isAwaitingPaymentAccount = false; 
    this.pendingPaymentDetails = null;
    return { 
      success: false, 
      message: "I seem to have gotten stuck processing that payment account. Let's try starting the payment recording again if you'd like.", 
      interactionType: 'error_internal' 
    };
  }

  /* Temporarily commenting out problematic sections to get the build working
   * This code will need to be properly fixed after the build check
   */
  
  /**
   * Determine if this agent can handle the given query
   */
  async canHandle(query: string): Promise<boolean> {
    // Simplified implementation to get the build working
    return mightBeAboutAP(query);
  }

  /**
   * Process accounts payable related requests
   */

  /**
   * Get counts of bills by status
   */
  private async getBillsStatusCount(): Promise<Record<string, number>> {
    try {
      // Query the database to get counts of bills by status
      const result = await sql`
        SELECT status, COUNT(*) as count
        FROM bills
        WHERE is_deleted IS NOT TRUE
        GROUP BY status
        ORDER BY count DESC
      `;
      
      // Convert to a record object
      const statusCounts: Record<string, number> = {};
      for (const row of result.rows) {
        statusCounts[row.status] = parseInt(row.count);
      }
      
      return statusCounts;
    } catch (error) {
      console.error('[APAgent] Error getting bill status counts:', error);
      return {};
    }
  }

  private simplifyBill(bill: Bill): Partial<Bill> {
    // Convert string amounts to numbers if needed
    const total_amount = typeof bill.total_amount === 'number' 
      ? bill.total_amount 
      : parseFloat(bill.total_amount as unknown as string) || 0;
      
    const amount_paid = typeof bill.amount_paid === 'number' 
      ? bill.amount_paid 
      : parseFloat(bill.amount_paid as unknown as string) || 0;
      
    return {
      id: bill.id,
      bill_number: bill.bill_number,
      bill_date: bill.bill_date,
      due_date: bill.due_date,
      total_amount,
      amount_paid,
      status: bill.status
    };
  }

  /**
   * Handle queries about bill status counts
   */
  private async handleBillStatusCountQuery(context: AgentContext): Promise<AgentResponse> {
    try {
      // Get bill status counts
      const statusCounts = await this.getBillsStatusCount();
      
      // Format for display
      const statusStrings = Object.entries(statusCounts)
        .map(([status, count]) => `${count} bills in '${status}' status`)
        .join('\n');
      
      // Return formatted response
      return {
        success: true,
        message: `Here's a summary of your vendor bills by status:\n\n${statusStrings}\n\nWould you like more details about any specific status?`,
        data: { billStatusCounts: statusCounts }
      };
    } catch (error) {
      console.error('[APAgent] Error handling bill status count query:', error);
      return {
        success: false,
        message: `I encountered an error while retrieving bill status information. ${error instanceof Error ? error.message : 'Please try again later.'}`
      };
    }
  }

  async processRequest(context: AgentContext): Promise<AgentResponse> {
    const { query, userId } = context; // anthropic is this.anthropic

    if (this.isAwaitingPaymentAccount) {
      // _handleAwaitingPaymentAccount will now always return an AgentResponse.
      // It handles re-prompting, success, or failure internally.
      return this._handleAwaitingPaymentAccount(context);
    }
    console.log(`[APAgent] Processing request: ${query}`);
    
    try {
      const paymentInfoExtracted = extractPaymentInfoFromQuery(context.query);
      let combinedInfo: {
        action?: string; 
        requestedStatus?: string;
        billNumbers?: string[];
        isBulkUpdate?: boolean;
        vendorName?: string;
        payment_date?: string;
        payment_amount?: number;
        payment_account_name?: string; 
        payment_account_id?: number; 
        payment_method?: string;
        reference_number?: string;
        all_bills?: boolean;
        // from billStatusAnalysis
        targetStatus?: string; // Specific to billStatusAnalysis
        queryType?: string; // Specific to billStatusAnalysis for queries
        queriedStatus?: string; // Specific to billStatusAnalysis for queries
      } = {
        vendorName: paymentInfoExtracted.vendor_name, // Corrected to vendorName
        payment_date: paymentInfoExtracted.payment_date || new Date().toISOString().split('T')[0],
        payment_amount: paymentInfoExtracted.amount,
        payment_account_name: paymentInfoExtracted.payment_account,
        payment_method: paymentInfoExtracted.payment_method,
        reference_number: paymentInfoExtracted.reference_number,
        all_bills: paymentInfoExtracted.all_bills || false,
        action: undefined, // Will be determined by logic below
        requestedStatus: undefined,
        billNumbers: paymentInfoExtracted.bill_number ? [paymentInfoExtracted.bill_number] : [], // Corrected to check singular bill_number and wrap in array
        isBulkUpdate: false, // Default, can be overridden by billStatusAnalysis
      };

      // 1. Log the agent action
      await logAuditEvent({
        user_id: context.userId,
        action_type: "PROCESS_QUERY",
        entity_type: "AP_QUERY",
        entity_id: context.conversationId || "unknown",
        context: { query: context.query, agentId: this.id },
        status: "ATTEMPT",
        timestamp: new Date().toISOString()
      });
      
      // Handle simple confirmation responses for various AP agent operations
      const normalizedQuery = context.query.toLowerCase().trim();
      const confirmationResponses = ['yes', 'yeah', 'yep', 'yup', 'yess', 'yesss', 'yea', 'sure', 'confirm', 'proceed', 'ok', 'okay'];
      const cancellationResponses = ['no', 'nah', 'nope', 'cancel', 'stop', 'abort'];
      
      if (confirmationResponses.includes(normalizedQuery)) {
        // 1. Check if this is confirming a duplicate vendor creation
        if (this.lastDuplicateWarning?.userId === context.userId) {
          console.log(`[APAgent] Processing confirmation to create duplicate vendor: ${this.lastDuplicateWarning.vendorName}`);
          return this.createVendorAfterConfirmation(context);
        }
        
        // 2. Check if this is confirming bill creation
        if (this.pendingBillCreation?.userId === context.userId) {
          console.log(`[APAgent] Processing confirmation to create bill for vendor ID: ${this.pendingBillCreation.vendorId}`);
          return this.createBillWithInfo(context);
        }
        
        // 3. Check if this is confirming completing a vendor creation that has all required fields
        const userId = context.userId || 'unknown';
        if (pendingVendorCreation[userId]) {
          const vendorInfo = pendingVendorCreation[userId];
          
          // Check if we have all required vendor information
          if (vendorInfo.name && vendorInfo.contact_person && vendorInfo.email && 
              vendorInfo.phone && vendorInfo.address) {
            
            console.log(`[APAgent] Processing confirmation to complete vendor creation for: ${vendorInfo.name}`);
            console.log(`[APAgent] Vendor details:`, JSON.stringify(vendorInfo, null, 2));
            
            try {
              // Clear the pending state before proceeding
              const vendorToCreate = {...vendorInfo}; // Create a copy to avoid reference issues
              delete pendingVendorCreation[userId];
              
              // Create the vendor with all the information we've collected
              return this.createVendorWithInfo(userId, vendorToCreate);
            } catch (error) {
              console.error('[APAgent] Error processing vendor confirmation:', error);
              return {
                success: false,
                message: 'Sorry, there was an error processing your confirmation. Please try creating the vendor again.'
              };
            }
          } else {
            // We have pending info but some fields are still missing
            const missing: string[] = [];
            if (!vendorInfo.name) missing.push('vendor name');
            if (!vendorInfo.contact_person) missing.push('contact person');
            if (!vendorInfo.email) missing.push('email');
            if (!vendorInfo.phone) missing.push('phone number');
            if (!vendorInfo.address) missing.push('address');
            
            const needsList = await this.formatListWithAI(missing);
            return {
              success: false,
              message: `I still need more information before I can create this vendor. Missing: ${needsList}.`
            };
          }
        }
      }
      
      // Handle explicit cancellation of duplicate vendor creation
      if (cancellationResponses.includes(normalizedQuery)) {
        if (this.lastDuplicateWarning?.userId === context.userId) {
          // User chose not to create duplicate; clear the warning and pending state
          this.lastDuplicateWarning = null;
          return {
            success: true,
            message: 'Okay, I will not create another vendor with the same name.'
          };
        }
        
        if (this.pendingBillCreation?.userId === context.userId) {
          // User chose not to create the bill; clear the pending state
          this.pendingBillCreation = null;
          return {
            success: true,
            message: 'Okay, I will not create the bill.'
          };
        }
      }
      
      // If we have an outstanding duplicate warning, prompt the user until they confirm or cancel.
      if (this.lastDuplicateWarning?.userId === context.userId) {
        return {
          success: false,
          message: `There is already a vendor named "${this.lastDuplicateWarning.vendorName}". Reply "yes" to create another one or "no" to cancel.`
        };
      }
      
      // 2. First, check if we have a pending vendor creation for this user
      const normalized = context.query.toLowerCase();
      const userId = context.userId || 'unknown';
      if (pendingVendorCreation[userId]) {
        console.log(`[APAgent] Found pending vendor creation for user ${userId}`);
        
        // Extract any new information from this message
        const newInfo = extractVendorInfoFromQuery(context.query);
        console.log(`[APAgent] Extracted new vendor info:`, newInfo);
        
        // Merge with stored information (new info takes precedence)
        const stored = pendingVendorCreation[userId];
        const merged = { 
          name: newInfo.name || stored.name,
          contact_person: newInfo.contact_person || stored.contact_person,
          email: newInfo.email || stored.email,
          phone: newInfo.phone || stored.phone,
          address: newInfo.address || stored.address
        };
        
        console.log(`[APAgent] Merged vendor info:`, merged);
        
        // Update store with new merged information
        pendingVendorCreation[userId] = merged;
        
        // If name still missing, ask again (unlikely)
        if (!merged.name) {
          return {
            success: false,
            message: 'I still need the vendor name. Please provide it.'
          };
        }
        
        // Check for remaining missing fields
        const missing: string[] = [];
        if (!merged.contact_person) missing.push('contact person');
        if (!merged.email) missing.push('email');
        if (!merged.phone) missing.push('phone number');
        if (!merged.address) missing.push('address');
        
        if (missing.length > 0) {
          const needsList = await this.formatListWithAI(missing);
          return {
            success: false,
            message: `Thanks. I still need the following for vendor ${merged.name}: ${needsList}.`
          };
        }
        
        // All info available, ask for confirmation before proceeding
        console.log(`[APAgent] All vendor info collected, requesting confirmation for ${merged.name}`);
        
        // Don't clear the pending state yet, wait for confirmation
        return {
          success: true,
          message: `I have all the information needed to create vendor ${merged.name}:
- Contact Person: ${merged.contact_person}
- Email: ${merged.email}
- Phone: ${merged.phone}
- Address: ${merged.address}

Would you like me to create this vendor? Please confirm.`
        };
      }

      if (isVendorCreationQuery(normalized)) {
        return this.handleVendorCreation(context);
      }
      
      // New AI-Powered Bill Status Analysis
      const billStatusAnalysis: BillStatusAnalysis = await isBillStatusUpdateQuery(context.query, this.anthropic, context.userId);

      if (billStatusAnalysis.isStatusRelated) {
        if (billStatusAnalysis.isUpdateRequest && billStatusAnalysis.targetStatus) {
          console.log(`[APAgent] AI Detected bill status UPDATE request. Target Status: ${billStatusAnalysis.targetStatus}, Bill Numbers: ${billStatusAnalysis.billNumbers?.join(', ')}, Bulk: ${billStatusAnalysis.isBulkUpdate}`);
          
          const legacyUpdateInfoAdapter = {
            isUpdateRequest: true,
            requestedStatus: billStatusAnalysis.targetStatus,
            billNumbers: billStatusAnalysis.billNumbers || [],
            isBulkUpdate: billStatusAnalysis.isBulkUpdate || 
                          (billStatusAnalysis.billNumbers && billStatusAnalysis.billNumbers.length > 1) || 
                          (billStatusAnalysis.isBulkUpdate && (!billStatusAnalysis.billNumbers || billStatusAnalysis.billNumbers.length === 0)),
            // billNumber and limitToRecent from the old system are not directly mapped here.
            // The existing handleBillStatusUpdate will primarily use requestedStatus, billNumbers, and isBulkUpdate.
          };
          
          // Populate combinedInfo with billStatusAnalysis results
          combinedInfo.targetStatus = billStatusAnalysis.targetStatus;
          combinedInfo.isBulkUpdate = billStatusAnalysis.isBulkUpdate || (billStatusAnalysis.billNumbers && billStatusAnalysis.billNumbers.length > 1) || (billStatusAnalysis.isBulkUpdate && (!billStatusAnalysis.billNumbers || billStatusAnalysis.billNumbers.length === 0));
          combinedInfo.billNumbers = Array.from(new Set([...(combinedInfo.billNumbers || []), ...(billStatusAnalysis.billNumbers || [])])); // Merge and deduplicate
          combinedInfo.queryType = billStatusAnalysis.queryType;
          combinedInfo.queriedStatus = billStatusAnalysis.queriedStatus;
          if(billStatusAnalysis.targetStatus) combinedInfo.requestedStatus = billStatusAnalysis.targetStatus; 

          // Now, additionally check if this is also a payment recording intent
          if (combinedInfo.targetStatus?.toLowerCase() === 'paid' && isBillPaymentQuery(context.query)) { // Removed paymentInfoExtracted.isPaymentQuery
            console.log('[APAgent] Confirmed: AI detected update to Paid AND payment intent confirmed via isBillPaymentQuery.');
            combinedInfo.action = 'pay_bills';
            let billIdsToPay: number[] = [];

            // Determine bill IDs
            const allUserOpenBillsResult = await getBills(1, 500, undefined, undefined, undefined, 'Open', false, context.userId); // Fetch up to 500 open bills for the user
            let allUserOpenBills: Bill[] = allUserOpenBillsResult.bills;

            if (billStatusAnalysis.billNumbers && billStatusAnalysis.billNumbers.length > 0) {
              const aiBillNumbersLower = billStatusAnalysis.billNumbers.map(num => num.toLowerCase());
              const matchedBills = allUserOpenBills.filter((bill: Bill) => bill.bill_number && aiBillNumbersLower.includes(bill.bill_number.toLowerCase()));
              billIdsToPay = matchedBills.map((b: Bill) => b.id).filter((id?: number): id is number => id !== undefined);
              if (billIdsToPay.length === 0 && billStatusAnalysis.billNumbers.length > 0) {
                return { success: false, message: `I found open bills, but none matched the specific bill numbers: ${billStatusAnalysis.billNumbers.join(', ')}. Please check the bill numbers or ask to pay all open bills.` };
              }
            } else if (combinedInfo.all_bills) {
              billIdsToPay = allUserOpenBills.map((b: Bill) => b.id).filter((id?: number): id is number => id !== undefined);
            } else if (combinedInfo.vendorName) { // Corrected to vendorName
              // Assuming allUserOpenBills contains bills for potentially multiple vendors if no specific vendor was part of the initial query for bills.
              // We need to get vendorId for combinedInfo.vendorName to filter bills properly if Bill type has vendor_id.
              // For now, if getBills was called with a vendorName, it should already be filtered.
              // If not, and Bill type has vendor_id, we'd need to fetch vendor by name here.
              // Let's assume for this fix, if combinedInfo.vendorName is present, allUserOpenBills should ideally be pre-filtered by it or Bill has vendor_name.
              // Given the previous error (77d5eea9), Bill might not have vendor_name. We will rely on getBills to handle filtering by vendor_name if possible.
              // If not, this part might need another pass once Bill type and getBills capabilities are fully clear.
              // For a safer approach, if combinedInfo.vendorName is set, and getBills wasn't filtered by it, this might be tricky.
              // Let's try to find bills that match the vendor_name if present on the bill object directly (as a fallback, acknowledging lint error 77d5eea9 was for this area)
              const vendorNameToFilter = combinedInfo.vendorName.toLowerCase();
              const vendorBills = allUserOpenBills.filter(b => 
                (b as any).vendor_name?.toLowerCase() === vendorNameToFilter || // Tentative access, acknowledging potential type issue for Bill.vendor_name
                (b.vendor_id && combinedInfo.vendorName) // Placeholder for future vendor_id matching logic
              );
              billIdsToPay = vendorBills.map((b: Bill) => b.id).filter((id?: number): id is number => id !== undefined);
              if(billIdsToPay.length === 0 && combinedInfo.vendorName) {
                return { success: false, message: `I found open bills, but none specifically for vendor '${combinedInfo.vendorName}'. You can ask to pay all open bills.` };
              }
            }

            if (billIdsToPay.length === 0) {
              return { success: true, message: "I couldn't identify any specific open bills to pay based on your request." };
            }

            // Resolve payment account ID
            let paymentAccountIdToUse: number | undefined = combinedInfo.payment_account_id;
            // const bankAccountTypes = ['Bank', 'Checking', 'Savings', 'Credit Card']; // Types filter removed for broader search

            if (!paymentAccountIdToUse && combinedInfo.payment_account_name) {
              // Fetch all active accounts for the user to find a direct match by name/code
              const allUserAccounts = await getAccounts({ isActive: true, isDeleted: false, limit: 100, userId: context.userId });
              const foundAccount = allUserAccounts.find((acc: Account) => 
                acc.name.toLowerCase() === combinedInfo.payment_account_name?.toLowerCase() || 
                acc.code?.toLowerCase() === combinedInfo.payment_account_name?.toLowerCase()
              );
              if (foundAccount) paymentAccountIdToUse = foundAccount.id;
            }

            if (!paymentAccountIdToUse) {
              // Try AI selection or default if no specific account mentioned or found
              // Fetch all active accounts for the user for AI selection
              const getAccountsOptions = { isActive: true, isDeleted: false, limit: 100, userId: context.userId }; // Removed 'types' filter
              console.log('[APAgent.processRequest] Attempting to fetch all active accounts with options:', JSON.stringify(getAccountsOptions));
              const userGLAccountsResults = await getAccounts(getAccountsOptions);
              console.log('[APAgent.processRequest] All active accounts received for payment selection:', JSON.stringify(userGLAccountsResults));
              if (userGLAccountsResults.length > 0) {
                const selectedAccountResult = await this.selectPaymentAccountWithAI(context, userGLAccountsResults.map((acc: Account) => ({id: acc.id, name: acc.name, account_type: acc.account_type})), `Payment for bills: ${billIdsToPay.join(', ')}`, combinedInfo.vendorName);
                if (selectedAccountResult.accountId) {
                  paymentAccountIdToUse = selectedAccountResult.accountId;
                  console.log(`[APAgent] AI selected payment account: ${paymentAccountIdToUse}`);
                } else {
                  // If AI can't select and no default, ask user
                  this.pendingPaymentDetails = {
                    billIds: billIdsToPay,
                    paymentDate: combinedInfo.payment_date || new Date().toISOString().split('T')[0],
                    paymentAmount: combinedInfo.payment_amount,
                    vendorName: combinedInfo.vendorName,
                    allBills: combinedInfo.all_bills,
                  };
                  this.isAwaitingPaymentAccount = true;
                  let billContextMessage = "the selected bills";
                  if (combinedInfo.all_bills) billContextMessage = "all open bills";
                  else if (combinedInfo.vendorName && billIdsToPay.length > 0) billContextMessage = `the bills for ${combinedInfo.vendorName}`;
                  else if (billIdsToPay.length === 1) billContextMessage = `bill ID ${billIdsToPay[0]}`;
                  return {
                    success: true,
                    message: `Okay, I'm ready to record payment for ${billContextMessage}. Which payment account would you like to use?`,
                    interactionType: 'needs_payment_account',
                  };
                }
              } else {
                 // This message might need adjustment now that we fetch all accounts
                 return { success: false, message: "You don't seem to have any active accounts set up. Please add one first." };
              }
            }

            if (!paymentAccountIdToUse) { // Should be caught by above, but as a safeguard
                return { success: false, message: "I couldn't determine which payment account to use. Please specify one."};
            }
            
            console.log(`[APAgent] Proceeding to bulkPayVendorBills. Bill IDs: ${billIdsToPay.join(', ')}, AccountID: ${paymentAccountIdToUse}`);
            return this.bulkPayVendorBills({
              billIds: billIdsToPay,
              paymentDate: combinedInfo.payment_date || new Date().toISOString().split('T')[0],
              paymentAccountId: paymentAccountIdToUse,
              paymentMethod: combinedInfo.payment_method,
              referenceNumber: combinedInfo.reference_number,
              userId: context.userId,
              token: context.token
            });

          } else { // Not a payment query to 'Paid', but a different status update
            console.log('[APAgent] AI detected status update, but not a payment intent or not to Paid. Proceeding with regular status update.');
            return this.handleBillStatusUpdate(context, legacyUpdateInfoAdapter);
          }
        } else if (billStatusAnalysis.isQueryByStatus && billStatusAnalysis.queriedStatus) {
          console.log(`[APAgent] AI Detected bill status QUERY. Queried Status: ${billStatusAnalysis.queriedStatus}, Query Type: ${billStatusAnalysis.queryType}, Bill Numbers: ${billStatusAnalysis.billNumbers?.join(', ')}`);
          if (billStatusAnalysis.queryType === 'count' || billStatusAnalysis.queryType === 'general_status_summary') {
            return this.handleBillStatusCountQuery(context);
          } else if (billStatusAnalysis.queryType === 'list') {
            return {
              success: true,
              message: `I understand you want a list of bills with status '${billStatusAnalysis.queriedStatus}'. I can provide overall counts by status currently. Listing specific bills by status is a feature I'm still learning! `,
              followUpPrompt: "Would you like to see the counts of bills by status instead?",
              interactionType: "needs_clarification"
            };
          } else if (billStatusAnalysis.queryType === 'specific_bill_info' && billStatusAnalysis.billNumbers && billStatusAnalysis.billNumbers.length > 0) {
             return {
                success: true,
                message: `I see you're asking about bill(s): ${billStatusAnalysis.billNumbers.join(', ')} and their status '${billStatusAnalysis.queriedStatus}'. I'm not yet able to fetch detailed information for specific bills based on status queries, but I'm learning! `,
                interactionType: "needs_clarification"
            };
          } else {
            return {
              success: true,
              message: `I understand your query is about bills with status '${billStatusAnalysis.queriedStatus}'. How can I assist you further with that topic?`,
              interactionType: "needs_clarification"
            };
          }
        } else {
            console.log("[APAgent] AI detected a status-related query, but it's not clearly an update or a well-defined query, or essential information (like targetStatus or queriedStatus) is missing. Analysis:", billStatusAnalysis);
            // Fall through to other general AP query handling if appropriate
        }
      }
      
      // Only check for bill creation after confirming it's not a status update AND not a status query handled above
      if (!billStatusAnalysis.isStatusRelated && isBillCreationQuery(normalized)) {
        return this.handleBillCreation(context);
      }
      
      // Check if user is asking about bill counts or status
      if (normalized.includes('how many') && 
          (normalized.includes('bill') || normalized.includes('bills')) && 
          (normalized.includes('draft') || normalized.includes('open') || normalized.includes('paid') || normalized.includes('status'))) {
        console.log('[APAgent] Handling bill status count query');
        return this.handleBillStatusCountQuery(context);
      }
      
      // Check if this is a statement processing request
      if (this.isStatementProcessingQuery(normalized)) {
        console.log('[APAgent] Handling statement processing query');
        return this.processStatement(context, context.query);
      }
      
      // Check if this is a request to list GL accounts
      const isListAccountsRequest = (
        (normalized.includes('list') || normalized.includes('show') || normalized.includes('get') || normalized.includes('what are')) && 
        (normalized.includes('gl account') || normalized.includes('gl accounts') || normalized.includes('general ledger account') || 
         normalized.includes('chart of accounts') || normalized.includes('coa') || normalized.includes('available account'))
      );
      
      if (isListAccountsRequest) {
        console.log('[APAgent] Handling request to list GL accounts');
        
        // Check for specific account type filters
        let accountType: string | undefined;
        
        if (normalized.includes('expense') || normalized.includes('expenses')) {
          accountType = 'expense';
        } else if (normalized.includes('asset') || normalized.includes('assets')) {
          accountType = 'asset';
        } else if (normalized.includes('liability') || normalized.includes('liabilities')) {
          accountType = 'liability';
        } else if (normalized.includes('equity')) {
          accountType = 'equity';
        } else if (normalized.includes('revenue') || normalized.includes('income')) {
          accountType = 'revenue';
        }
        
        return this.listGLAccounts(context, accountType);
      }
      
      // Check if this is a confirmation to set starting balance
      if (confirmationResponses.includes(normalizedQuery) && 
          this.pendingStatementProcessing[context.userId]) {
        console.log('[APAgent] Handling confirmation to set starting balance');
        return this.setAccountStartingBalance(context);
      }
      
      // 3. Gather relevant vendor information
      const relevantVendors = await findRelevantVendors(context.query, 5);
      console.log(`[APAgent] Found ${relevantVendors.length} relevant vendors`);
      
      // 3. Get relevant bills - if there's a vendor match, get their bills specifically
      const vendorId = relevantVendors.length > 0 ? relevantVendors[0].id : undefined;
      const relevantBills = await findRelevantBills(context.query, 5, vendorId);
      console.log(`[APAgent] Found ${relevantBills.length} relevant bills`);
      
      // 4. Prepare context for Claude
      const systemPrompt = this.buildSystemPrompt(relevantVendors, relevantBills);
      
      // 5. Format previous messages for Claude if available
      const messages: MessageParam[] = [];

      // Fallback if no specific handlers were matched by this point in the try block
      if (!billStatusAnalysis.isStatusRelated && 
          !isBillCreationQuery(normalized) && 
          !isListAccountsRequest && 
          !this.isStatementProcessingQuery(normalized) && 
          !(normalized.includes('how many') && (normalized.includes('bill') || normalized.includes('bills')) && (normalized.includes('draft') || normalized.includes('open') || normalized.includes('paid') || normalized.includes('status'))))
      {
          console.log('[APAgent] Query did not match specific handlers, attempting generic Claude response.');
      } else if (!billStatusAnalysis.isStatusRelated) {
          // This case means it was handled by one of the non-status related handlers above (bill creation, list accounts etc.)
          // and those handlers should have returned. If we reach here, it's an unexpected state or a handler didn't return.
          console.warn('[APAgent] Reached end of specific handlers without returning, but query was handled. This should not happen.');
          return { success: false, message: "I seem to have gotten confused. Please try your request again." };
      } else if (billStatusAnalysis.isStatusRelated && !(billStatusAnalysis.isUpdateRequest && billStatusAnalysis.targetStatus) && !(billStatusAnalysis.isQueryByStatus && billStatusAnalysis.queriedStatus)) {
          // Status related, but not an update or a known query type, and fell through previous blocks.
          console.log('[APAgent] Status related query fell through specific handlers. Attempting generic response.');
      } 
      // If it's not status related, and not handled by other specific non-status handlers, it will proceed to Claude generic

      if (context.previousMessages && context.previousMessages.length > 0) {
        for (const msg of context.previousMessages) {
          if (msg.role === 'user' || msg.role === 'assistant') {
            messages.push({
              role: msg.role as "user" | "assistant",
              content: msg.content
            });
          }
        }
      }
      
      // 6. Add current query
      messages.push({
        role: "user",
        content: context.query
      });
      
      // 7. Send to Claude
      const response = await this.anthropic.messages.create({
        model: "claude-3-5-sonnet-20240620",
        max_tokens: 4000,
        system: systemPrompt,
        messages: messages
      });
      
      // 8. Log successful completion
      await logAuditEvent({
        user_id: context.userId,
        action_type: "PROCESS_QUERY",
        entity_type: "AP_QUERY",
        entity_id: context.conversationId || "unknown",
        context: { 
          query: context.query,
          relevantVendorsCount: relevantVendors.length,
          relevantBillsCount: relevantBills.length,
          agentId: this.id
        },
        status: "SUCCESS",
        timestamp: new Date().toISOString()
      });
      
      return {
        success: true,
        message: typeof response.content[0] === 'object' && 'text' in response.content[0] ? response.content[0].text || '' : '',
        data: {
          relevantVendors: relevantVendors.map(v => this.simplifyVendor(v)),
          relevantBills: relevantBills.map(b => this.simplifyBill(b))
        }
      };
    } catch (error) {
      console.error("[APAgent] Error processing request:", error);
      
      // Log the error
      await logAuditEvent({
        user_id: context.userId,
        action_type: "PROCESS_QUERY",
        entity_type: "AP_QUERY",
        entity_id: context.conversationId || "unknown",
        context: { query: context.query, agentId: this.id },
        status: "FAILURE",
        error_details: error instanceof Error ? error.message : String(error),
        timestamp: new Date().toISOString()
      });
      
      return {
        success: false,
        message: "I encountered an error while processing your accounts payable query. Please try again or rephrase your question.",
        data: {}
      };
    }
  }
  
  /**
   * Build a system prompt for Claude that includes vendor and bill information
   */
  private buildSystemPrompt(vendors: Vendor[], bills: Bill[]): string {
    let prompt = `You are an Accounts Payable Assistant specialized in helping users with vendor management, bill processing, and payment workflows.
    
Use the following information to help answer the user's query about accounts payable:

`;

    // Add vendor information if available
    if (vendors.length > 0) {
      prompt += `## Relevant Vendors\n\n`;
      
      vendors.forEach((vendor, index) => {
        prompt += `### Vendor ${index + 1}: ${vendor.name}\n`;
        prompt += `- Contact: ${vendor.contact_person || 'N/A'}\n`;
        prompt += `- Email: ${vendor.email || 'N/A'}\n`;
        prompt += `- Phone: ${vendor.phone || 'N/A'}\n`;
        prompt += `- Address: ${vendor.address || 'N/A'}\n\n`;
      });
    }
    
    // Add bill information if available
    if (bills.length > 0) {
      prompt += `## Relevant Bills\n\n`;
      
      bills.forEach((bill, index) => {
        const totalAmount = typeof bill.total_amount === 'number' ? bill.total_amount : parseFloat(bill.total_amount as unknown as string) || 0;
        const amountPaid = typeof bill.amount_paid === 'number' ? bill.amount_paid : parseFloat(bill.amount_paid as unknown as string) || 0;
        
        // Get vendor name from bill if available (from BillWithVendor)
        const vendorName = (bill as BillWithVendor).vendor_name || 'Unknown Vendor';
        
        prompt += `### Bill ${index + 1}: ${bill.bill_number || `Bill #${bill.id}`}\n`;
        prompt += `- Vendor: ${vendorName}\n`;
        prompt += `- Amount: $${totalAmount.toFixed(2)}\n`;
        prompt += `- Date: ${bill.bill_date}\n`;
        prompt += `- Due Date: ${bill.due_date}\n`;
        prompt += `- Status: ${bill.status || 'Unknown'}\n`;
        prompt += `- Amount Paid: $${amountPaid.toFixed(2)}\n`;
        
        // Add memo if available
        if (bill.memo) {
          prompt += `- Memo: ${bill.memo}\n`;
        }
        
        // Add line items if available
        const detailedBill = bill as BillWithDetails;
        if (detailedBill.lines && detailedBill.lines.length > 0) {
          prompt += `- Line Items:\n`;
          
          detailedBill.lines.forEach((line, lineIndex) => {
            prompt += `  * ${line.description || 'No description'}: $${line.amount} (${line.expense_account_name || 'Unknown account'})\n`;
          });
        }
        
        prompt += '\n';
      });
    }
    
    prompt += `## Guidelines for Responses:

1. Be concise and focused on accounts payable information.
2. If you're asked about a vendor or bill not in the context, explain that you don't have that specific information and suggest using the accounting system to look it up.
3. For general accounts payable questions, provide helpful guidance based on standard accounting practices.
4. Recommend using the Accounts Payable section of the accounting system for detailed vendor or bill management.
5. Don't make up information about specific vendors or bills that aren't provided in the context.
`;

    return prompt;
  }
  
  /**
   * Create a vendor with complete information
   * This is used when we have all required fields
   */
  private async createVendorWithInfo(userId: string, vendorInfo: any): Promise<AgentResponse & { vendor?: any }> {
    try {
      console.log('[APAgent] Creating vendor with complete info:', vendorInfo);
      
      // Check for duplicate vendor name
      const existing = await getVendorByName(vendorInfo.name!);
      if (existing) {
        // Store duplicate warning so we can handle user confirmation later
        this.lastDuplicateWarning = {
          userId: userId || 'unknown',
          vendorName: vendorInfo.name!,
          vendorInfo
        };
        return {
          success: false,
          message: `A vendor named "${vendorInfo.name}" already exists (ID ${existing?.id || 'unknown'}). Do you still want to create another one? If yes, please confirm.`
        };
      }
      
      // Create vendor in database
      let dbVendor;
      try {
        dbVendor = await createVendorRecord({
          name: vendorInfo.name!,
          contact_person: vendorInfo.contact_person,
          email: vendorInfo.email,
          phone: vendorInfo.phone,
          address: vendorInfo.address
        });
      } catch (dbErr) {
        console.error('[APAgent] DB error creating vendor:', dbErr);
        await logAuditEvent({
          user_id: userId || 'unknown',
          action_type: "VENDOR_CREATION",
          entity_type: "VENDOR",
          entity_id: vendorInfo.name,
          context: { vendorInfo, error: dbErr },
          status: "FAILURE",
          timestamp: new Date().toISOString()
        });
        return {
          success: false,
          message: 'Failed to create the vendor due to a server error.'
        };
      }

      await logAuditEvent({
        user_id: userId || 'unknown',
        action_type: "VENDOR_CREATION",
        entity_type: "VENDOR",
        entity_id: dbVendor.id?.toString() || vendorInfo.name,
        context: { vendorInfo, vendorId: dbVendor.id },
        status: "SUCCESS",
        timestamp: new Date().toISOString()
      });

      return {
        success: true,
        message: `Vendor ${dbVendor.name} has been created successfully.`,
        vendor: dbVendor
      };
    } catch (error) {
      console.error('[APAgent] Error in createVendorWithInfo:', error);
      return {
        success: false,
        message: 'An error occurred while creating the vendor. Please try again.'
      };
    }
  }
  
  /**
   * Handle vendor creation requests
   * This handles the initial vendor creation request and extracts information
   */
  /**
   * Process a confirmation to create a vendor even though it's a duplicate
   */
  private async createVendorAfterConfirmation(context: AgentContext): Promise<AgentResponse> {
    try {
      // If we don't have vendor info stored, this is an error condition
      if (!this.lastDuplicateWarning || !this.lastDuplicateWarning.vendorInfo) {
        return {
          success: false,
          message: "I'm not sure which vendor you're confirming. Please provide the vendor details again."
        };
      }
      
      const vendorInfo = this.lastDuplicateWarning.vendorInfo;
      console.log(`[APAgent] Creating duplicate vendor after confirmation: ${vendorInfo.name}`);
      
      // Create vendor in database
      let dbVendor;
      try {
        dbVendor = await createVendorRecord({
          name: vendorInfo.name!,
          contact_person: vendorInfo.contact_person,
          email: vendorInfo.email,
          phone: vendorInfo.phone,
          address: vendorInfo.address
        });
      } catch (dbErr) {
        console.error('[APAgent] DB error creating vendor:', dbErr);
        await logAuditEvent({
          user_id: context.userId || 'unknown',
          action_type: "VENDOR_CREATION",
          entity_type: "VENDOR",
          entity_id: vendorInfo.name,
          context: { query: context.query, vendorInfo, error: dbErr },
          status: "FAILURE",
          timestamp: new Date().toISOString()
        });
        return {
          success: false,
          message: 'Failed to create the vendor due to a server error.'
        };
      }

      // Clear the stored warning since we've now handled it
      this.lastDuplicateWarning = null;
      
      await logAuditEvent({
        user_id: context.userId || 'unknown',
        action_type: "VENDOR_CREATION",
        entity_type: "VENDOR",
        entity_id: dbVendor.id?.toString() || vendorInfo.name,
        context: { query: context.query, vendorInfo, vendorId: dbVendor.id },
        status: "SUCCESS",
        timestamp: new Date().toISOString()
      });

      return {
        success: true,
        message: `Vendor ${dbVendor.name} has been created successfully, even though a vendor with the same name already existed.`
      };
    } catch (error) {
      console.error('[APAgent] Error in createVendorAfterConfirmation:', error);
      return {
        success: false,
        message: 'An error occurred while creating the vendor. Please try again.'
      };
    }
  }
  
  /**
   * Store partial vendor information and prompt for missing fields
   */
  private async storePartialVendorInfo(context: AgentContext, vendorInfo: any): Promise<AgentResponse> {
    const missingFields: string[] = [];
    if (!vendorInfo.name) missingFields.push('vendor name');
    if (!vendorInfo.contact_person) missingFields.push('contact person');
    if (!vendorInfo.email) missingFields.push('email');
    if (!vendorInfo.phone) missingFields.push('phone number');
    if (!vendorInfo.address) missingFields.push('address');
    
    // Store what we have so far in our in-memory store
    pendingVendorCreation[context.userId || 'unknown'] = vendorInfo;
    
    // Log the attempt
    await logAuditEvent({
      user_id: context.userId || 'unknown',
      action_type: "VENDOR_CREATION",
      entity_type: "VENDOR",
      entity_id: vendorInfo.name || 'unknown',
      context: { query: context.query, vendorInfo, missingFields },
      status: "FAILURE",
      timestamp: new Date().toISOString()
    });
    
    // Format a friendly message asking for the missing fields
    const needsList = await this.formatListWithAI(missingFields);
    
    return {
      success: false,
      message: `To create the vendor${vendorInfo.name ? ' '+vendorInfo.name : ''}, I still need the following information: ${needsList}. Please provide.`
    };
  }
  
  private async handleVendorCreation(context: AgentContext): Promise<AgentResponse> {
    try {
      // Extract vendor details from the query
      const vendorInfo = extractVendorInfoFromQuery(context.query);
      console.log('[APAgent] Extracted vendor info:', vendorInfo);
      
      // Log audit event
      await logAuditEvent({
        user_id: context.userId || 'unknown',
        action_type: "VENDOR_CREATION",
        entity_type: "VENDOR",
        entity_id: vendorInfo.name || 'unknown',
        context: { query: context.query, vendorInfo },
        status: "ATTEMPT",
        timestamp: new Date().toISOString()
      });
      
      // Determine any missing fields we want to collect before creation
      const missingFields: string[] = [];
      if (!vendorInfo.name) missingFields.push('vendor name');
      if (!vendorInfo.contact_person) missingFields.push('contact person');
      if (!vendorInfo.email) missingFields.push('email');
      if (!vendorInfo.phone) missingFields.push('phone number');
      if (!vendorInfo.address) missingFields.push('address');

      // Store what we have and ask for more
      return await this.storePartialVendorInfo(context, vendorInfo);
      
      // Check for duplicate vendor name
      const existing = await getVendorByName(vendorInfo.name!);
      if (existing) {
        return {
          success: false,
          message: `A vendor named "${vendorInfo.name}" already exists (ID ${existing?.id || 'unknown'}). Do you still want to create another one? If yes, please confirm.`
        };
      }
      
      // If we have all required information, proceed with creation
      if (vendorInfo.name && vendorInfo.contact_person && vendorInfo.email && 
          vendorInfo.phone && vendorInfo.address) {
        return this.createVendorWithInfo(context.userId || 'unknown', vendorInfo);
      }
      
      // Otherwise, store what we have and prompt for the rest
      return await this.storePartialVendorInfo(context, vendorInfo);
      
    } catch (error) {
      console.error('[APAgent] Error in vendor creation:', error);
      
      // Log the error
      await logAuditEvent({
        user_id: context.userId || 'unknown',
        action_type: "VENDOR_CREATION",
        entity_type: "VENDOR",
        entity_id: 'unknown',
        context: { query: context.query, errorType: "ERROR" },
        status: "FAILURE",
        error_details: error instanceof Error ? error.message : String(error),
        timestamp: new Date().toISOString()
      });
      
      return {
        success: false,
        message: `I encountered an error while trying to create the vendor: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  }

  /**
   * Handle bill creation requests
   * This handles the initial bill creation request and extracts information using AI
   */
  /**
   * Handle bill status update requests
   * This handles requests to change a bill's status (e.g., from Draft to Open)
   */
  private async handleBillStatusUpdate(context: AgentContext, adaptedInfo: AdaptedBillStatusInfo): Promise<AgentResponse> {
    try {
      // The AI analysis is now done in processRequest and passed via adaptedInfo.
      // We no longer call analyzeBillStatusUpdateWithAI here.
      console.log('[APAgent] Handling bill status update with pre-analyzed info:', adaptedInfo);
      
      // Use the adaptedInfo directly. For clarity, we can rename it or its properties if desired.
      // For this refactor, we'll map to 'combinedInfo' like structure for minimal changes below.
      const combinedInfo = {
        isUpdateRequest: adaptedInfo.isUpdateRequest, // Should always be true if this handler is called
        isBulkUpdate: adaptedInfo.isBulkUpdate || false, // Default to false if undefined
        requestedStatus: adaptedInfo.requestedStatus, // Will be checked for undefined below
        billNumbers: adaptedInfo.billNumbers || [],
        limitToRecent: undefined, // Not currently passed by legacyUpdateInfoAdapter; can be added
        vendorName: undefined    // Not currently passed by legacyUpdateInfoAdapter; can be added
      };
      
      // Need a target status regardless of what kind of update it is
      // Final fallback if Claude doesn't provide a clear action or structured response
      if (!combinedInfo.requestedStatus) {
        return {
          success: false,
          message: "I'm not sure what status you want to set for the bills. Please specify if you want to set them to 'Open'."
        };
      }

      // Handle recent bills if specified
      if (combinedInfo.limitToRecent && combinedInfo.limitToRecent > 0) {
        return await this.handleRecentBillsStatusUpdate(context, combinedInfo.requestedStatus, combinedInfo.limitToRecent);
      }
      
      // Handle bulk update if requested
      if (combinedInfo.isBulkUpdate) {
        // Note: The logic for asking for a payment account if missing during a payment/"Paid" status update
        // has been moved to the main processRequest method, where billIdsToPay and paymentAccountIdToUse are appropriately scoped.
        if (combinedInfo.vendorName) {
          return await this.handleVendorBillsStatusUpdate(context, combinedInfo.requestedStatus, combinedInfo.vendorName);
        }
        return await this.handleBulkBillStatusUpdate(context, combinedInfo.requestedStatus, combinedInfo.billNumbers);
      }
      
      // For single bill updates, we need a bill number
      // Use the first bill number from the combined info
      const billNumber = combinedInfo.billNumbers?.[0];
      
      if (!billNumber) {
        return {
          success: false,
          message: "I need a bill number to update the status. Please specify which bill you'd like to update."
        };
      }

      console.log(`[APAgent] Attempting to update bill #${billNumber} to status: ${combinedInfo.requestedStatus}`);
      
      // Find the bill by bill number
      const bills = await findRelevantBills(billNumber);
      
      if (bills.length === 0) {
        return {
          success: false,
          message: `I couldn't find a bill with the number ${billNumber}. Please check the bill number and try again.`
        };
      }

      // Get the first matching bill
      const bill = bills[0];
      
      // If the bill is already in the requested status, inform the user
      if (bill.status === combinedInfo.requestedStatus) {
        return {
          success: true,
          message: `Bill #${billNumber} is already in ${combinedInfo.requestedStatus} status.`
        };
      }

      // Make sure the bill has an ID
      if (!bill.id) {
        return {
          success: false,
          message: `Found bill #${billNumber} but it has an invalid ID. Please contact your system administrator.`
        };
      }
      
      console.log(`[APAgent] Found bill ID ${bill.id}, current status: ${bill.status}, updating to: ${combinedInfo.requestedStatus}`);
      
      // For bills changing from Draft to Open, we need to:
      // 1. Update the bill status
      // 2. Create a journal entry
      const previousStatus = bill.status;
      const isChangingToOpen = previousStatus !== 'Open' && combinedInfo.requestedStatus === 'Open';
      
      // First, update the bill status via the database
      const updatedBill = await updateBill(bill.id, { status: combinedInfo.requestedStatus });
      
      if (!updatedBill) {
        return {
          success: false,
          message: `Failed to update bill #${billNumber}. The bill might have been deleted or there was a server error.`
        };
      }
      
      // If changing to Open status, call the API endpoint to create the journal entry
      // This API does the full update + journal entry creation
      if (isChangingToOpen) {
        console.log(`[APAgent] Bills have been updated to Open status, now creating journal entries`);
        try {
          console.log(`[APAgent] Bill changed from ${previousStatus} to Open - calling API to create journal entry`);
          
          // Make a simple cross-process API call that will detect the status change
          // and create the journal entry
          // Get base URL for the API call
          const host = process.env.NEXT_PUBLIC_APP_URL || process.env.VERCEL_URL || 'localhost:3000';
          const protocol = host.includes('localhost') ? 'http' : 'https';
          const baseUrl = host.startsWith('http') ? host : `${protocol}://${host}`;
          
          console.log(`[APAgent] Using base URL for API call: ${baseUrl}`);
          
          const response = await fetch(`${baseUrl}/api/bills/${bill.id}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer internal-api-call'
            },
            body: JSON.stringify({
              bill: { 
                // Set status to Open again, which will trigger journal entry creation
                // via the API's existing logic
                status: 'Open' 
              }
            })
          });
          
          if (!response.ok) {
            console.warn(`[APAgent] API call for journal entry creation returned status ${response.status}`);
            // Note: We don't return an error here since the bill status was already updated
          } else {
            console.log(`[APAgent] Journal entry created successfully for bill ${bill.id}`);
          }
        } catch (apiError) {
          // Log the error but don't fail the operation since the bill status was already updated
          console.error('[APAgent] Error calling API to create journal entry:', apiError);
        }
      }

      // Log the status update
      await logAuditEvent({
        user_id: context.userId || 'unknown',
        action_type: "BILL_STATUS_UPDATE",
        entity_type: "BILL",
        entity_id: bill.id.toString(),
        context: { 
          query: context.query, 
          previousStatus: bill.status,
          newStatus: combinedInfo.requestedStatus 
        },
        status: "SUCCESS",
        timestamp: new Date().toISOString()
      });

      return {
        success: true,
        message: `I've updated bill #${billNumber} from '${bill.status}' to '${combinedInfo.requestedStatus}' status. ${combinedInfo.requestedStatus === 'Open' ? 'A journal entry has been created for this bill.' : ''}`
      };
    } catch (error) {
      console.error('[APAgent] Error updating bill status:', error);
      
      return {
        success: false,
        message: `Sorry, I encountered an error while trying to update the bill status. ${error instanceof Error ? error.message : 'Please try again later.'}`
      };
    }
  }
  
  /**
   * Handle updating the status of the most recent bills
   * This is used when the user requests to update the N most recent bills
   */
  private async handleRecentBillsStatusUpdate(context: AgentContext, newStatus: string, limit: number): Promise<AgentResponse> {
    try {
      console.log(`[APAgent] Attempting to update the ${limit} most recent draft bills to ${newStatus}`);
      
      // Find the most recent draft bills up to the limit
      // Only select columns that we know exist in the bills table
      console.log(`[APAgent] Searching for draft bills with limit: ${limit}`);
      
      // Debug query to check what status values exist in the database
      const statusCheck = await sql`
        SELECT DISTINCT status FROM bills
      `;
      console.log(`[APAgent] Available bill statuses in database:`, statusCheck.rows.map(row => row.status));
      
      // Using case-insensitive comparison for status field
      const result = await sql`
        SELECT id, bill_number, status, vendor_id, created_at 
        FROM bills 
        WHERE LOWER(status) = 'draft'
        ORDER BY created_at DESC
        LIMIT ${limit}
      `;
      
      const recentBills = result.rows;
      
      if (recentBills.length === 0) {
        return {
          success: false,
          message: "I couldn't find any recent bills in 'Draft' status to update. All bills may already be in 'Open' status."
        };
      }
      
      console.log(`[APAgent] Found ${recentBills.length} recent bills in Draft status to update`);
      
      // Get bill IDs to update
      const billIds = recentBills.map(bill => bill.id);
      
      // Update all bills to the new status
      let updatedBills;
      try {
        // If we have no IDs, return early
        if (billIds.length === 0) {
          console.log('[APAgent] No valid bill IDs found to update');
          return {
            success: false,
            message: "No valid bills found to update."
          };
        }
        
        console.log(`[APAgent] Attempting to update ${billIds.length} bills with IDs: ${billIds.join(', ')} to status: ${newStatus.toLowerCase()}`);
        
        // Update each bill individually to avoid array syntax issues
        // Ensure status is properly capitalized to match database expectations
        // Most database schemas use 'Draft' and 'Open' with capital first letters
        const formattedStatus = newStatus.charAt(0).toUpperCase() + newStatus.slice(1).toLowerCase();
        console.log(`[APAgent] Updating bills to status: ${formattedStatus}`);
        
        for (const billId of billIds) {
          await sql`
            UPDATE bills
            SET status = ${formattedStatus},
            updated_at = NOW()
            WHERE id = ${billId}
          `;
        }
        
        // Get updated bills using parameterized queries for each ID
        // This avoids any potential issues with SQL injection or string formatting
        const updatedBillsPromises = billIds.map(id => {
          return sql`
            SELECT id, bill_number, status
            FROM bills
            WHERE id = ${id}
          `;
        });
        
        const updatedBillsResults = await Promise.all(updatedBillsPromises);
        updatedBills = { rows: updatedBillsResults.flatMap(result => result.rows) };
      } catch (dbError) {
        console.error('[APAgent] Database error in recent bills update:', dbError);
        return {
          success: false,
          message: `I encountered a database error while trying to update the bills: ${dbError instanceof Error ? dbError.message : 'Unknown database error'}`
        };
      }
      
      // For bills changing to Open status, call the API endpoint to create journal entries
      const isChangingToOpen = newStatus.toLowerCase() === 'open';
      let journalEntriesCreated = 0;
      
      if (isChangingToOpen) {
        // Get base URL for the API call
        const host = process.env.VERCEL_URL || 'localhost:3000';
        const protocol = host.includes('localhost') ? 'http' : 'https';
        const baseUrl = `${protocol}://${host}`;
        
        // Create journal entries for each bill
        for (const billId of billIds) {
          try {
            const response = await fetch(`${baseUrl}/api/bills/${billId}`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer internal-api-call'
              },
              body: JSON.stringify({
                bill: { status: 'Open' }
              })
            });
            
            if (response.ok) {
              console.log(`[APAgent] Successfully created journal entry for bill ${billId}`);
              journalEntriesCreated++;
            }
          } catch (apiError) {
            // Log but continue with other bills
            console.error(`[APAgent] Error creating journal entry for bill ${billId}:`, apiError);
          }
        }
      }
      
      // Format bill numbers for the message
      const billNumbers = recentBills.map(bill => bill.bill_number || `ID: ${bill.id}`).join(', ');
      
      // Log the bulk status update
      await logAuditEvent({
        user_id: context.userId || 'unknown',
        action_type: "BULK_BILL_STATUS_UPDATE",
        entity_type: "BILLS",
        entity_id: "recent",
        context: { 
          query: context.query, 
          previousStatus: "Draft",
          newStatus: newStatus,
          billCount: recentBills.length,
          limit: limit,
          billIds: billIds
        },
        status: "SUCCESS",
        timestamp: new Date().toISOString()
      });

      return {
        success: true,
        message: `I've updated the ${recentBills.length} most recent draft bills to '${newStatus}' status.${billNumbers ? ` The bills updated were: ${billNumbers}.` : ''} ${isChangingToOpen ? `Journal entries have been created for ${journalEntriesCreated} bills.` : ''}`
      };
    } catch (error) {
      console.error('[APAgent] Error in recent bills status update:', error);
      
      return {
        success: false,
        message: `Sorry, I encountered an error while trying to update the recent bills: ${error instanceof Error ? error.message : 'Please try again later.'}`
      };
    }
  }
  
  /**
   * Handle updating bills for a specific vendor
   * This is used when the user requests to update all bills from a specific vendor
   */
  private async handleVendorBillsStatusUpdate(context: AgentContext, newStatus: string, vendorName: string): Promise<AgentResponse> {
    try {
      console.log(`[APAgent] Attempting to update bills for vendor '${vendorName}' to ${newStatus}`);
      
      // First, find the vendor ID by name
      const vendorResult = await sql`
        SELECT id, name 
        FROM vendors 
        WHERE name ILIKE ${`%${vendorName}%`}
        LIMIT 1
      `;
      
      if (vendorResult.rows.length === 0) {
        return {
          success: false,
          message: `I couldn't find a vendor matching '${vendorName}'. Please check the vendor name and try again.`
        };
      }
      
      const vendorId = vendorResult.rows[0].id;
      const exactVendorName = vendorResult.rows[0].name;
      
      console.log(`[APAgent] Found vendor ID ${vendorId} for '${exactVendorName}'`);
      
      // Find draft bills for this vendor
      // Only select columns that we know exist in the bills table
      const billsResult = await sql`
        SELECT id, bill_number, status
        FROM bills 
        WHERE vendor_id = ${vendorId}
        AND status = 'Draft'
      `;
      
      const vendorBills = billsResult.rows;
      
      if (vendorBills.length === 0) {
        return {
          success: false,
          message: `I couldn't find any bills in 'Draft' status for vendor '${exactVendorName}'.`
        };
      }
      
      console.log(`[APAgent] Found ${vendorBills.length} draft bills for vendor '${exactVendorName}'`);
      
      // Get bill IDs to update
      const billIds = vendorBills.map(bill => bill.id);
      
      // Update all bills to the new status
      let updatedBills;
      try {
        // Create a parameterized query with billIds as a comma-separated list
        const billIdString = billIds.join(', ');
        
        // If we have no IDs, return early
        if (!billIdString) {
          return {
            success: false,
            message: "No valid bills found to update."
          };
        }
        
        // Use raw SQL with a properly escaped list of IDs
        updatedBills = await sql`
          UPDATE bills
          SET status = ${newStatus.toLowerCase()},
          updated_at = NOW()
          WHERE id IN (SELECT unnest(ARRAY[${billIdString}]::integer[]))
          RETURNING id, bill_number, status
        `;
      } catch (dbError) {
        console.error('[APAgent] Database error in vendor bills update:', dbError);
        return {
          success: false,
          message: `I encountered a database error while trying to update the vendor bills: ${dbError instanceof Error ? dbError.message : 'Unknown database error'}`
        };
      }
      
      // For bills changing to Open status, call the API endpoint to create journal entries
      const isChangingToOpen = newStatus.toLowerCase() === 'open';
      let journalEntriesCreated = 0;
      
      if (isChangingToOpen) {
        // Get base URL for the API call
        const host = process.env.VERCEL_URL || 'localhost:3000';
        const protocol = host.includes('localhost') ? 'http' : 'https';
        const baseUrl = `${protocol}://${host}`;
        
        // Create journal entries for each bill
        for (const billId of billIds) {
          try {
            const response = await fetch(`${baseUrl}/api/bills/${billId}`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                bill: { status: 'Open' }
              })
            });
            
            if (response.ok) {
              journalEntriesCreated++;
            }
          } catch (apiError) {
            // Log but continue with other bills
            console.error(`[APAgent] Error creating journal entry for bill ${billId}:`, apiError);
          }
        }
      }
      
      // Format bill numbers for the message
      const billNumbers = vendorBills.map(bill => bill.bill_number || `ID: ${bill.id}`).join(', ');
      
      // Log the bulk status update
      await logAuditEvent({
        user_id: context.userId || 'unknown',
        action_type: "VENDOR_BILLS_STATUS_UPDATE",
        entity_type: "BILLS",
        entity_id: vendorId.toString(),
        context: { 
          query: context.query, 
          previousStatus: "Draft",
          newStatus: newStatus,
          vendorName: exactVendorName,
          vendorId: vendorId,
          billCount: vendorBills.length,
          billIds: billIds
        },
        status: "SUCCESS",
        timestamp: new Date().toISOString()
      });

      return {
        success: true,
        message: `I've updated ${vendorBills.length} draft bills for vendor '${exactVendorName}' to '${newStatus}' status.${billNumbers ? ` The bills updated were: ${billNumbers}.` : ''} ${isChangingToOpen ? `Journal entries have been created for ${journalEntriesCreated} bills.` : ''}`
      };
    } catch (error) {
      console.error('[APAgent] Error in vendor bills status update:', error);
      
      return {
        success: false,
        message: `Sorry, I encountered an error while trying to update bills for the vendor: ${error instanceof Error ? error.message : 'Please try again later.'}`
      };
    }
  }
  
  /**
   * Handle bulk bill status updates
   * This handles updating multiple bills at once, typically from Draft to Open status
   */
  private async handleBulkBillStatusUpdate(context: AgentContext, newStatus: string, billNumbers?: string[]): Promise<AgentResponse> {
    try {
      console.log(`[APAgent] Attempting bulk bill status update to ${newStatus}`);
      
      // Find bills by ID if bill numbers are provided, otherwise find all draft bills
      let result;
      
      if (billNumbers && billNumbers.length > 0) {
        console.log(`[APAgent] Looking for specific bills by ID/number: ${billNumbers.join(', ')}`);
        
        // Try to find bills by ID first (if the bill numbers are numeric)
        const numericIds = billNumbers
          .filter((num: string) => !isNaN(parseInt(num)))
          .map((num: string) => parseInt(num));
          
        if (numericIds.length > 0) {
          console.log(`[APAgent] Searching for bills with IDs: ${numericIds.join(', ')}`);
          const idList = numericIds.join(',');
          result = await sql.query(`
            SELECT id, bill_number, status, vendor_id, total_amount 
            FROM bills 
            WHERE id IN (${idList})
          `);
        } else {
          // If no numeric IDs, try to find by bill_number
          console.log(`[APAgent] No numeric IDs found, searching by bill_number`);
          const billNumberList = billNumbers.map(bn => `'${bn}'`).join(',');
          result = await sql.query(`
            SELECT id, bill_number, status, vendor_id, total_amount 
            FROM bills 
            WHERE bill_number IN (${billNumberList})
          `);
        }
      } else {
        // No specific bill numbers provided, find bills based on the requested status change
        // For payment requests, we need to find Open bills
        // For other status changes (like Draft to Open), we find Draft bills
        const statusToFind = newStatus.toLowerCase() === 'paid' ? 'open' : 'draft';
        console.log(`[APAgent] No specific bill numbers provided, finding all ${statusToFind} bills`);
        
        // Add user_id filter for proper data isolation
        const userId = context.userId;
        if (!userId) {
          console.warn('[APAgent] No userId provided for bill status update, data isolation may be compromised');
        }
        
        // Use parameterized query with user_id filter
        if (userId) {
          result = await sql.query(
            `SELECT id, bill_number, status, vendor_id, total_amount 
             FROM bills 
             WHERE LOWER(status) = $1 AND user_id = $2`,
            [statusToFind, userId]
          );
        } else {
          result = await sql.query(
            `SELECT id, bill_number, status, vendor_id, total_amount 
             FROM bills 
             WHERE LOWER(status) = $1`,
            [statusToFind]
          );
        }
      }
      
      const billsToUpdate = result.rows;
      
      // Determine the appropriate message based on the status we're looking for
      const statusToFind = newStatus.toLowerCase() === 'paid' ? 'Open' : 'Draft';
      
      if (billsToUpdate.length === 0) {
        return {
          success: false,
          message: `I couldn't find any bills in '${statusToFind}' status to update.`
        };
      }
      
      console.log(`[APAgent] Found ${billsToUpdate.length} bills in ${statusToFind} status to update`);
      
      // Get bill IDs to update
      const billIds = billsToUpdate.map((bill: any) => bill.id);
      
      // Update all bills to the new status
      let updatedBills;
      try {
        // If we have no IDs, return early
        if (billIds.length === 0) {
          return {
            success: false,
            message: "No valid bills found to update."
          };
        }
        
        console.log(`[APAgent] Updating bill status for ${billIds.length} bills to ${newStatus}`);
        
        // Use the dedicated API endpoint for bulk bill status updates
        try {
          // Get base URL for the API call
          const host = process.env.NEXT_PUBLIC_APP_URL || process.env.VERCEL_URL || 'localhost:3000';
          const protocol = host.includes('localhost') ? 'http' : 'https';
          const baseUrl = host.startsWith('http') ? host : `${protocol}://${host}`;
          console.log(`[APAgent] Using base URL for API call: ${baseUrl}`);
          
          const response = await fetch(`${baseUrl}/api/bills/update-status`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': 'Bearer internal-api-call'
            },
            body: JSON.stringify({
              billIds: billIds,
              newStatus: newStatus
            })
          });
          
          if (!response.ok) {
            const errorText = await response.text();
            console.error(`[APAgent] API error in bulk bill update: ${response.status} - ${errorText}`);
            
            // Check for specific error messages and handle them gracefully
            if (errorText.includes('No default payment account found')) {
              return {
                success: false,
                message: "I couldn't complete the payment process because no default payment account is set up. Please set up a payment account first."
              };
            }
            
            throw new Error(`API error: ${response.status} - ${errorText}`);
          }
          
          const result = await response.json();
          updatedBills = result;
          console.log(`[APAgent] Successfully updated ${billIds.length} bills to ${newStatus} status`);
        } catch (apiError) {
          console.error('[APAgent] API error in bulk bill update:', apiError);
          throw apiError;
        }
      } catch (dbError) {
        console.error('[APAgent] Database error in bulk bill update:', dbError);
        return {
          success: false,
          message: `I encountered a database error while trying to update the bills: ${dbError instanceof Error ? dbError.message : 'Unknown database error'}`
        };
      }
      
      // For bills changing to Open status, call the API endpoint to create journal entries
      const isChangingToOpen = newStatus.toLowerCase() === 'open';
      let journalEntriesCreated = 0;
      
      if (isChangingToOpen) {
        // Get base URL for the API call
        const host = process.env.VERCEL_URL || 'localhost:3000';
        const protocol = host.includes('localhost') ? 'http' : 'https';
        const baseUrl = `${protocol}://${host}`;
        
        // Create journal entries for each bill
        for (const billId of billIds) {
          try {
            const response = await fetch(`${baseUrl}/api/bills/${billId}`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                bill: { status: 'Open' }
              })
            });
            
            if (response.ok) {
              journalEntriesCreated++;
            }
          } catch (apiError) {
            // Log but continue with other bills
            console.error(`[APAgent] Error creating journal entry for bill ${billId}:`, apiError);
          }
        }
      }
      
      // Log the bulk status update
      await logAuditEvent({
        user_id: context.userId || 'unknown',
        action_type: "BULK_BILL_STATUS_UPDATE",
        entity_type: "BILLS",
        entity_id: "multiple",
        context: { 
          query: context.query, 
          previousStatus: "Draft",
          newStatus: newStatus,
          billCount: billsToUpdate.length,
          billIds: billIds
        },
        status: "SUCCESS",
        timestamp: new Date().toISOString()
      });

      return {
        success: true,
        message: `I've updated ${billsToUpdate.length} bills to '${newStatus}' status. ${isChangingToOpen ? `Journal entries have been created for ${journalEntriesCreated} bills.` : ''}`
      };
    } catch (error) {
      console.error('[APAgent] Error in bulk bill status update:', error);
      
      return {
        success: false,
        message: `Sorry, I encountered an error while trying to update multiple bills: ${error instanceof Error ? error.message : 'Please try again later.'}`
      };
    }
  }

  /**
   * Handle bill creation requests
   */
  private async handleBillCreation(context: AgentContext): Promise<AgentResponse> {
    try {
      // Check if this is a bill creation request using AI instead of pattern matching
      const isBillCreation = await this.detectBillCreationWithAI(context.query);
      if (!isBillCreation) {
        return {
          success: false,
          message: "I'm not sure if you're trying to create a bill. Please provide details like vendor name, amount, and what the bill is for."
        };
      }
      
      // Use AI to extract bill details from the query for more accurate results
      console.log('[APAgent] Using AI to extract bill info from query');
      const billInfo = await extractBillInfoWithAI(context.query);
      console.log('[APAgent] AI-extracted bill info:', billInfo);
      
      // Log audit event
      await logAuditEvent({
        user_id: context.userId || 'unknown',
        action_type: "BILL_CREATION",
        entity_type: "BILL",
        entity_id: billInfo.vendor_name || 'unknown',
        context: { query: context.query, billInfo },
        status: "ATTEMPT",
        timestamp: new Date().toISOString()
      });
    
      // Clean up vendor name using AI instead of regex
      if (billInfo.vendor_name) {
        billInfo.vendor_name = await this.cleanVendorNameWithAI(billInfo.vendor_name);
      }
      
      // If we have a vendor name, try to find matching vendor
      let vendorId: number | undefined;
      let vendorExactMatch = false;
      
      if (billInfo.vendor_name) {
        try {
          console.log(`[APAgent] Searching for vendor with name: "${billInfo.vendor_name}"`);
          const vendors = await getVendors(1, 10, billInfo.vendor_name);
          console.log(`[APAgent] Found ${vendors.vendors.length} potential matching vendors:`, vendors.vendors);
          
          if (vendors.vendors.length > 0) {
            // Use AI to find the best matching vendor
            const matchResult = await this.findBestVendorMatchWithAI(billInfo.vendor_name, vendors.vendors);
            
            if (matchResult.vendorId) {
              vendorId = matchResult.vendorId;
              vendorExactMatch = matchResult.exactMatch;
              console.log(`[APAgent] AI found ${matchResult.exactMatch ? 'exact' : 'close'} vendor match with ID ${vendorId}`);
            } else {
              console.log(`[APAgent] AI found no good vendor match for "${billInfo.vendor_name}"`);
            }
          } else {
            console.log(`[APAgent] No vendors found matching "${billInfo.vendor_name}"`);
          }
        } catch (err) {
          console.error('[APAgent] Error searching for vendor:', err);
        }
      }
    
      // Store the bill info and vendor ID for confirmation
      this.pendingBillCreation = {
        userId: context.userId || 'unknown',
        billInfo,
        vendorId
      };
      
      // If no vendor found but we have a vendor name, create the vendor automatically
      if (!vendorId && billInfo.vendor_name) {
        try {
          console.log(`[APAgent] Vendor not found, automatically creating vendor: ${billInfo.vendor_name}`);
          
          // Create a basic vendor with just the name
          const vendorInfo = {
            name: billInfo.vendor_name,
            email: '',
            phone: '',
            address: '',
            city: '',
            state: '',
            zip: '',
            country: '',
            notes: 'Automatically created by Accounting Assistant'
          };
          
          // Create the vendor
          const createResult = await this.createVendorWithInfo(context.userId || 'unknown', vendorInfo);
          
          if (createResult.success && createResult.vendor?.id) {
            // Use the newly created vendor
            vendorId = createResult.vendor.id;
            console.log(`[APAgent] Successfully created vendor ${billInfo.vendor_name} with ID ${vendorId}`);
          } else {
            console.error(`[APAgent] Failed to create vendor: ${createResult.message || 'Unknown error'}`);
            return {
              success: false,
              message: `I tried to create a vendor for ${billInfo.vendor_name} but encountered an error. Please create the vendor manually first.`
            };
          }
        } catch (err) {
          console.error('[APAgent] Error creating vendor automatically:', err);
          return {
            success: false,
            message: `I tried to create a vendor for ${billInfo.vendor_name} but encountered an error. Please create the vendor manually first.`
          };
        }
      } else if (!vendorId) {
        // No vendor name provided
        return {
          success: false,
          message: `To create a bill, I need to know which vendor it's for. Please specify the vendor name.`
        };
      }
      
      // Check for essential fields - only amount is truly required
      if (!billInfo.amount) {
        return {
          success: false,
          message: `I need to know the amount for this bill. Please provide the amount you want to pay to ${billInfo.vendor_name}.`
        };
      }
      
      // Auto-generate missing non-critical fields
      if (!billInfo.bill_number) {
        // Generate a simple bill number using date and vendor name
        const date = new Date();
        const dateStr = `${date.getFullYear()}${(date.getMonth() + 1).toString().padStart(2, '0')}${date.getDate().toString().padStart(2, '0')}`;
        const vendorPrefix = billInfo.vendor_name ? billInfo.vendor_name.substring(0, 3).toUpperCase() : 'VEN';
        billInfo.bill_number = `${vendorPrefix}-${dateStr}`;
      }
      
      if (!billInfo.due_date) {
        // Default to 30 days from now
        const dueDate = new Date();
        dueDate.setDate(dueDate.getDate() + 30);
        billInfo.due_date = `${dueDate.getFullYear()}-${(dueDate.getMonth() + 1).toString().padStart(2, '0')}-${dueDate.getDate().toString().padStart(2, '0')}`;
      }
    
      // Now we have all necessary info, proceed with bill creation directly
      console.log('[APAgent] All bill info complete, proceeding to create bill directly');
      
      // Set pending bill creation state
      this.pendingBillCreation = {
        userId: context.userId || 'unknown',
        billInfo,
        vendorId
      };
      
      // Call createBillWithInfo directly
      return this.createBillWithInfo(context);
    } catch (error) {
      console.error('[APAgent] Error in bill creation:', error);
      
      // Log the error
      await logAuditEvent({
        user_id: context.userId || 'unknown',
        action_type: "BILL_CREATION",
        entity_type: "BILL",
        entity_id: 'unknown',
        context: { query: context.query, errorType: "ERROR" },
        status: "FAILURE",
        error_details: error instanceof Error ? error.message : String(error),
        timestamp: new Date().toISOString()
      });
      
      return {
        success: false,
        message: `I encountered an error while trying to create the bill: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  }

  /**
   * Extract statement information from a bank or credit card statement
   * @param query The user query containing statement information
   * @returns Promise with extracted statement information
   */
  private async extractStatementInfo(query: string): Promise<{
    accountCode?: string;
    accountName?: string;
    statementNumber?: string;
    statementDate?: string;
    balance?: number;
    lastFour?: string;
    success: boolean;
    message: string;
  }> {
    try {
      // Use AI to extract statement information directly
      const systemPrompt = `You are a financial assistant that extracts structured information from bank and credit card statements.
      Extract the following information from the user's message and return ONLY a JSON object with these fields:
      - accountCode: The account code or number (if mentioned)
      - accountName: The account name (bank or credit card name)
      - statementNumber: The statement number or identifier
      - statementDate: The statement date in YYYY-MM-DD format
      - balance: The current/ending balance as a number (no currency symbols or commas)
      - lastFour: The last 4 digits of the card (if applicable)
      
      If any information is missing, omit that field from the JSON. Do not include any explanations or additional text.
      Return ONLY the JSON object, nothing else.`;
      
      const response = await this.anthropic.messages.create({
        model: "claude-3-opus-20240229",
        max_tokens: 150,
        system: systemPrompt,
        messages: [{ role: "user", content: query }],
      });
      
      // Extract the JSON response
      let extractedInfo: any = {};
      if (response.content && response.content.length > 0 && 'text' in response.content[0]) {
        const responseText = response.content[0].text.trim();
        try {
          // Extract JSON object if it's wrapped in code blocks
          const jsonMatch = responseText.match(/```(?:json)?\s*({[\s\S]*?})\s*```/) || 
                           responseText.match(/^({[\s\S]*})$/);
          
          if (jsonMatch && jsonMatch[1]) {
            extractedInfo = JSON.parse(jsonMatch[1]);
          } else {
            extractedInfo = JSON.parse(responseText);
          }
          
          console.log('[APAgent.extractStatementInfo] Extracted info:', extractedInfo);
        } catch (parseError) {
          console.error('[APAgent.extractStatementInfo] Error parsing JSON response:', parseError);
          console.log('[APAgent.extractStatementInfo] Raw response:', response.content[0].text);
        }
      }
      
      // Convert balance to number if it's a string
      if (typeof extractedInfo.balance === 'string') {
        extractedInfo.balance = parseFloat(extractedInfo.balance.replace(/[^\d.-]/g, ''));
      }
      
      // Determine if we have enough information
      const hasMinimumInfo = !!(extractedInfo.accountCode || extractedInfo.accountName) && 
                            !!extractedInfo.statementNumber && 
                            !!extractedInfo.statementDate && 
                            extractedInfo.balance !== undefined;
      
      return {
        ...extractedInfo,
        success: hasMinimumInfo,
        message: hasMinimumInfo 
          ? 'Successfully extracted statement information.' 
          : 'Could not extract enough information from the statement. Please provide more details.'
      };
    } catch (error) {
      console.error('[APAgent.extractStatementInfo] Error:', error);
      return {
        success: false,
        message: 'Error extracting statement information. Please try again.'
      };
    }
  }
  
  /**
   * Format a list of items using AI for natural language presentation
   * @param items Array of string items to format into a natural language list
   * @returns Promise with a formatted string
   */
  private async formatListWithAI(items: string[]): Promise<string> {
    try {
      // Handle edge cases
      if (!items || items.length === 0) return '';
      if (items.length === 1) return items[0];
      
      // For short lists (2-3 items), use a simple approach to avoid unnecessary AI calls
      if (items.length === 2) return `${items[0]} and ${items[1]}`;
      if (items.length === 3) return `${items[0]}, ${items[1]}, and ${items[2]}`;
      
      // For longer lists, use AI to format them naturally
      const systemPrompt = `You are a text formatting assistant.
      Format the provided list items into a natural-sounding comma-separated list with "and" before the last item.
      Return ONLY the formatted list without any additional text, quotes, or explanation.`;
      
      const response = await this.anthropic.messages.create({
        model: "claude-3-haiku-20240307",
        max_tokens: 100,
        system: systemPrompt,
        messages: [{ role: "user", content: `Format this list: ${JSON.stringify(items)}` }],
      });
      
      // Extract the formatted list
      let formattedList = items.join(', ').replace(/, ([^,]*)$/, ' and $1'); // Fallback formatting
      if (response.content && response.content.length > 0 && 'text' in response.content[0]) {
        const responseText = response.content[0].text.trim();
        if (responseText) {
          formattedList = responseText;
        }
      }
      
      return formattedList;
    } catch (error) {
      console.error('[APAgent.formatListWithAI] Error:', error);
      // Fall back to simple regex formatting if AI fails
      return items.join(', ').replace(/, ([^,]*)$/, ' and $1');
    }
  }

  /**
   * Detect if a query is requesting to create a bill using AI
   * @param query The user query to analyze
   * @returns Promise<boolean> indicating if this is a bill creation request
   */
  private async detectBillCreationWithAI(query: string): Promise<boolean> {
    try {
      // If the query is very short, fall back to the original function
      if (!query || query.length < 10) {
        return isBillCreationQuery(query);
      }

      const systemPrompt = `You are a financial assistant that helps users with accounting tasks.
      Determine if the user's message is requesting to create a bill or invoice that needs to be paid (accounts payable).
      
      A bill creation request typically includes:
      - Intent to create, add, record, or enter a new bill
      - Information about a vendor or supplier
      - May include amount, due date, or description
      
      Do NOT classify as a bill creation request if:
      - It's about creating an invoice to send to customers (accounts receivable)
      - It's about paying an existing bill rather than creating a new one
      - It's just asking about bills without creating one
      
      Return ONLY "true" if it's a bill creation request or "false" if it's not. No other text.`;
      
      const response = await this.anthropic.messages.create({
        model: "claude-3-haiku-20240307",
        max_tokens: 10,
        system: systemPrompt,
        messages: [{ role: "user", content: query }],
      });
      
      // Extract the response
      let result = false;
      if (response.content && response.content.length > 0 && 'text' in response.content[0]) {
        const responseText = response.content[0].text.trim().toLowerCase();
        result = responseText === 'true';
      }
      
      console.log(`[APAgent.detectBillCreationWithAI] Query: "${query}" → Is bill creation: ${result}`);
      return result;
    } catch (error) {
      console.error('[APAgent.detectBillCreationWithAI] Error:', error);
      // Fall back to regex pattern matching if AI fails
      return isBillCreationQuery(query);
    }
  }

  /**
   * Find the best matching account using AI
   * @param accountQuery The account name, code, or ID to match
   * @param accounts List of potential account matches
   * @returns Promise with the best matching account ID and whether it was an exact match
   */
  private async findBestAccountMatchWithAI(accountQuery: string, accounts: any[]): Promise<{ accountId?: number; exactMatch: boolean }> {
    try {
      // If no accounts or no account query, return no match
      if (!accounts || accounts.length === 0 || !accountQuery) {
        return { exactMatch: false };
      }

      // Check if the query is a numeric ID first
      const potentialId = parseInt(accountQuery.trim(), 10);
      if (!isNaN(potentialId)) {
        const accountById = accounts.find(acc => acc.id === potentialId);
        if (accountById) {
          return { accountId: accountById.id, exactMatch: true };
        }
      }

      // If only one account, return it as the best match
      if (accounts.length === 1) {
        return { 
          accountId: accounts[0].id, 
          exactMatch: accounts[0].name.toLowerCase() === accountQuery.toLowerCase() || 
                     (accounts[0].code && accounts[0].code.toLowerCase() === accountQuery.toLowerCase())
        };
      }

      // For simple exact match cases, avoid AI call
      const exactMatch = accounts.find(acc => 
        acc.name.toLowerCase() === accountQuery.toLowerCase() ||
        (acc.code && acc.code.toLowerCase() === accountQuery.toLowerCase())
      );
      
      if (exactMatch) {
        return { accountId: exactMatch.id, exactMatch: true };
      }

      // Prepare account data for AI
      const accountOptions = accounts.map(acc => ({
        id: acc.id,
        name: acc.name,
        code: acc.code || '',
        type: acc.account_type || '',
        balance: acc.balance || 0
      }));

      const systemPrompt = `You are a financial assistant that helps match account names and codes.
      Given an account query and a list of potential account matches, determine the best matching account.
      
      Consider the following when making your determination:
      1. Exact matches should be prioritized
      2. Account codes are unique identifiers and should be given high priority if matched
      3. Common abbreviations (Checking, Savings, CC, etc.) should be normalized
      4. Small typos or minor differences should be tolerated
      5. Word order may vary but still represent the same account
      6. If there is no good match, indicate that no match was found
      
      Return ONLY a JSON object with these fields:
      - accountId: The ID of the best matching account (or null if no good match)
      - exactMatch: Boolean indicating if this is an exact match (true/false)
      - confidence: Number from 0-100 indicating match confidence
      
      Do not include any explanation or additional text.`;
      
      const response = await this.anthropic.messages.create({
        model: "claude-3-haiku-20240307",
        max_tokens: 150,
        system: systemPrompt,
        messages: [{ 
          role: "user", 
          content: `Find the best account match for "${accountQuery}" from these options: ${JSON.stringify(accountOptions)}` 
        }],
      });
      
      // Extract the JSON response
      let result: { accountId?: number; exactMatch: boolean } = { accountId: undefined, exactMatch: false };
      if (response.content && response.content.length > 0 && 'text' in response.content[0]) {
        const responseText = response.content[0].text.trim();
        try {
          // Extract JSON object if it's wrapped in code blocks
          const jsonMatch = responseText.match(/```(?:json)?\s*({[\s\S]*?})\s*```/) || 
                           responseText.match(/^({[\s\S]*})$/);
          
          if (jsonMatch && jsonMatch[1]) {
            const parsed = JSON.parse(jsonMatch[1]);
            result = { 
              accountId: parsed.accountId !== null ? parsed.accountId : undefined,
              exactMatch: !!parsed.exactMatch
            };
          } else {
            const parsed = JSON.parse(responseText);
            result = { 
              accountId: parsed.accountId !== null ? parsed.accountId : undefined,
              exactMatch: !!parsed.exactMatch
            };
          }
          
          console.log(`[APAgent.findBestAccountMatchWithAI] Match result:`, result);
        } catch (parseError) {
          console.error('[APAgent.findBestAccountMatchWithAI] Error parsing JSON response:', parseError);
          console.log('[APAgent.findBestAccountMatchWithAI] Raw response:', response.content[0].text);
        }
      }
      
      return result;
    } catch (error) {
      console.error('[APAgent.findBestAccountMatchWithAI] Error:', error);
      // Fall back to simple matching if AI fails
      const exactMatch = accounts.find(acc => 
        acc.name.toLowerCase() === accountQuery.toLowerCase() ||
        (acc.code && acc.code.toLowerCase() === accountQuery.toLowerCase())
      );
      
      if (exactMatch) {
        return { accountId: exactMatch.id, exactMatch: true };
      }
      
      // If no exact match, try partial matching
      const partialMatches = accounts.filter(acc => 
        acc.name.toLowerCase().includes(accountQuery.toLowerCase()) ||
        (acc.code && acc.code.toLowerCase().includes(accountQuery.toLowerCase()))
      );
      
      return partialMatches.length > 0 ? 
        { accountId: partialMatches[0].id, exactMatch: false } : 
        { exactMatch: false };
    }
  }

  /**
   * Find the best matching vendor using AI
   * @param vendorName The vendor name to match
   * @param vendors List of potential vendor matches
   * @returns Promise with the best matching vendor ID and whether it was an exact match
   */
  private async findBestVendorMatchWithAI(vendorName: string, vendors: any[]): Promise<{ vendorId?: number; exactMatch: boolean }> {
    try {
      // If no vendors or no vendor name, return no match
      if (!vendors || vendors.length === 0 || !vendorName) {
        return { exactMatch: false };
      }

      // If only one vendor, return it as the best match
      if (vendors.length === 1) {
        return { vendorId: vendors[0].id, exactMatch: vendors[0].name.toLowerCase() === vendorName.toLowerCase() };
      }

      // For simple exact match cases, avoid AI call
      const exactMatch = vendors.find(v => v.name.toLowerCase() === vendorName.toLowerCase());
      if (exactMatch) {
        return { vendorId: exactMatch.id, exactMatch: true };
      }

      // Prepare vendor data for AI
      const vendorOptions = vendors.map(v => ({
        id: v.id,
        name: v.name,
        contact_person: v.contact_person || '',
        email: v.email || '',
        phone: v.phone || '',
        address: v.address || ''
      }));

      const systemPrompt = `You are a financial assistant that helps match vendor names.
      Given a vendor name and a list of potential vendor matches, determine the best matching vendor.
      
      Consider the following when making your determination:
      1. Exact matches should be prioritized
      2. Common abbreviations (Inc., LLC, Co., etc.) should be normalized
      3. Small typos or minor differences should be tolerated
      4. Word order may vary but still represent the same vendor
      5. If there is no good match, indicate that no match was found
      
      Return ONLY a JSON object with these fields:
      - vendorId: The ID of the best matching vendor (or null if no good match)
      - exactMatch: Boolean indicating if this is an exact match (true/false)
      - confidence: Number from 0-100 indicating match confidence
      
      Do not include any explanation or additional text.`;
      
      const response = await this.anthropic.messages.create({
        model: "claude-3-haiku-20240307",
        max_tokens: 150,
        system: systemPrompt,
        messages: [{ 
          role: "user", 
          content: `Find the best vendor match for "${vendorName}" from these options: ${JSON.stringify(vendorOptions)}` 
        }],
      });
      
      // Extract the JSON response
      let result: { vendorId?: number; exactMatch: boolean } = { vendorId: undefined, exactMatch: false };
      if (response.content && response.content.length > 0 && 'text' in response.content[0]) {
        const responseText = response.content[0].text.trim();
        try {
          // Extract JSON object if it's wrapped in code blocks
          const jsonMatch = responseText.match(/```(?:json)?\s*({[\s\S]*?})\s*```/) || 
                           responseText.match(/^({[\s\S]*})$/);
          
          if (jsonMatch && jsonMatch[1]) {
            const parsed = JSON.parse(jsonMatch[1]);
            result = { 
              vendorId: parsed.vendorId !== null ? parsed.vendorId : undefined,
              exactMatch: !!parsed.exactMatch
            };
          } else {
            const parsed = JSON.parse(responseText);
            result = { 
              vendorId: parsed.vendorId !== null ? parsed.vendorId : undefined,
              exactMatch: !!parsed.exactMatch
            };
          }
          
          console.log(`[APAgent.findBestVendorMatchWithAI] Match result:`, result);
        } catch (parseError) {
          console.error('[APAgent.findBestVendorMatchWithAI] Error parsing JSON response:', parseError);
          console.log('[APAgent.findBestVendorMatchWithAI] Raw response:', response.content[0].text);
        }
      }
      
      return result;
    } catch (error) {
      console.error('[APAgent.findBestVendorMatchWithAI] Error:', error);
      // Fall back to simple exact match if AI fails
      const exactMatch = vendors.find(v => v.name.toLowerCase() === vendorName.toLowerCase());
      if (exactMatch) {
        return { vendorId: exactMatch.id, exactMatch: true };
      }
      // If no exact match, use the first vendor
      return vendors.length > 0 ? { vendorId: vendors[0].id, exactMatch: false } : { exactMatch: false };
    }
  }

  /**
   * Clean vendor name using AI instead of regex patterns
   * @param vendorName The raw vendor name to clean
   * @returns Promise with the cleaned vendor name
   */
  private async cleanVendorNameWithAI(vendorName: string): Promise<string> {
    try {
      // If the vendor name is very short or already looks clean, return it as is
      if (!vendorName || vendorName.length < 3) {
        return vendorName.trim();
      }

      const systemPrompt = `You are a financial assistant that cleans vendor names for accounting purposes.
      Given a raw vendor name, return ONLY the cleaned version with these modifications:
      1. Remove any trailing punctuation (periods, commas, semicolons, etc.)
      2. Remove any unnecessary prefixes like "Vendor:" or "Pay to:"
      3. Fix capitalization issues (proper capitalization for company names)
      4. Remove any extraneous information like transaction IDs or dates
      5. Standardize common abbreviations (Inc., LLC, etc.)
      
      Return ONLY the cleaned vendor name as plain text without quotes, explanation, or any other text.`;
      
      const response = await this.anthropic.messages.create({
        model: "claude-3-haiku-20240307",
        max_tokens: 50,
        system: systemPrompt,
        messages: [{ role: "user", content: `Clean this vendor name: "${vendorName}"` }],
      });
      
      // Extract the cleaned name
      let cleanedName = vendorName.trim();
      if (response.content && response.content.length > 0 && 'text' in response.content[0]) {
        const responseText = response.content[0].text.trim();
        if (responseText) {
          cleanedName = responseText;
        }
      }
      
      console.log(`[APAgent.cleanVendorNameWithAI] Original: "${vendorName}" → Cleaned: "${cleanedName}"`); 
      return cleanedName;
    } catch (error) {
      console.error('[APAgent.cleanVendorNameWithAI] Error:', error);
      // Fall back to simple regex cleaning if AI fails
      return vendorName.replace(/[.,;:!]+$/, "").trim();
    }
  }

  /**
   * Process a bank or credit card statement and set starting balance if needed
   * @param context The agent context
   * @param query The user query containing statement information
   * @returns Promise with the result of the processing
   */
  /**
   * Helper method to check if a query is about processing a bank or credit card statement
   * @param query The query to check
   * @returns Boolean indicating if the query is about statement processing
   */
  private isStatementProcessingQuery(query: string): boolean {
    const normalized = query.toLowerCase();
    const statementKeywords = [
      'statement', 'bank statement', 'credit card statement', 'account statement',
      'process statement', 'statement processing', 'starting balance',
      'statement balance', 'statement from', 'statement for',
      'opening balance', 'beginning balance', 'record statement'
    ];
    
    return statementKeywords.some(keyword => normalized.includes(keyword));
  }

  private async processStatement(
    context: AgentContext,
    query: string
  ): Promise<AgentResponse> {
    try {
      console.log('[APAgent] Processing statement query:', query);
      
      // Extract statement information
      const extractionResult = await this.extractStatementInfo(query);
      
      if (!extractionResult.success) {
        return {
          success: false,
          message: extractionResult.message,
          data: { sources: [] }
        };
      }
      
      // Prepare statement information
      const statementNumber = extractionResult.statementNumber || 'unknown';
      const statementDate = extractionResult.statementDate || new Date().toISOString().split('T')[0];
      
      console.log(`[APAgent] Extracted statement info: Number ${statementNumber}, Date ${statementDate}`);
      
      // First check if this statement has already been processed and identify the account
      const statementStatus = await checkStatementStatus(statementNumber, context.userId);
      
      // If the statement has already been processed, inform the user
      if (statementStatus.isProcessed && statementStatus.accountId && statementStatus.accountName) {
        return {
          success: true,
          message: `I've already processed statement ${statementNumber} for account ${statementStatus.accountName}. To avoid duplicate entries, I won't process it again.`,
          data: { sources: [] }
        };
      }
      
      // If we found an existing account but the statement hasn't been processed yet
      if (statementStatus.accountId && statementStatus.accountName) {
        // Process the statement via API
        const result = await processStatementViaApi({
          accountId: statementStatus.accountId,
          statementNumber,
          statementDate,
          balance: extractionResult.balance,
          isStartingBalance: false
        });
        
        if (result.success) {
          return {
            success: true,
            message: `I've recorded that statement ${statementNumber} for account ${statementStatus.accountName} has been processed. The statement date is ${statementDate}.`,
            data: { sources: [] }
          };
        } else {
          return {
            success: false,
            message: result.message,
            data: { sources: [] }
          };
        }
      }
      
      // If we couldn't identify the account from previous statements, try to find it by code or name
      let account;
      if (extractionResult.accountCode) {
        const { rows } = await sql`
          SELECT id, code, name, account_type FROM accounts 
          WHERE code = ${extractionResult.accountCode} AND user_id = ${context.userId}
        `;
        account = rows[0];
      }
      
      if (!account && extractionResult.accountName) {
        const { rows } = await sql`
          SELECT id, code, name, account_type FROM accounts 
          WHERE LOWER(name) LIKE ${`%${extractionResult.accountName.toLowerCase()}%`} AND user_id = ${context.userId}
        `;
        account = rows[0];
      }
      
      if (!account) {
        return {
          success: false,
          message: `I couldn't find an account matching ${extractionResult.accountCode || extractionResult.accountName}. Would you like me to create a new account?`,
          data: { sources: [] }
        };
      }
      
      // Process the statement via API
      const result = await processStatementViaApi({
        accountId: account.id,
        accountCode: account.code,
        accountName: account.name,
        statementNumber,
        statementDate,
        balance: extractionResult.balance,
        isStartingBalance: !statementStatus.hasStartingBalance && extractionResult.balance !== undefined
      });
      
      // If this is a starting balance, store the pending statement processing info for confirmation
      if (result.isStartingBalance) {
        this.pendingStatementProcessing[context.userId] = {
          accountId: account.id,
          accountCode: account.code,
          accountName: account.name,
          statementNumber,
          statementDate,
          lastFour: statementStatus.lastFour,
          balance: extractionResult.balance!,
          isStartingBalance: true
        };
        
        return {
          success: true,
          message: `I notice this is the first statement for account ${account.name}. Would you like me to set the starting balance to $${extractionResult.balance!.toFixed(2)} as of ${statementDate}?`,
          data: { sources: [] }
        };
      }
      
      return {
        success: true,
        message: `I've recorded that statement ${statementNumber} for account ${account.name} has been processed. The statement date is ${statementDate}.`,
        data: { sources: [] }
      };
    } catch (error) {
      console.error('Error processing statement:', error);
      return {
        success: false,
        message: 'I encountered an error while processing the statement. Please try again later.',
        data: { sources: [] }
      };
    }
  }
  
  /**
   * Set the starting balance for an account based on a statement
   * @param context The agent context
   * @returns Promise with the result of setting the starting balance
   */
  private async setAccountStartingBalance(
    context: AgentContext
  ): Promise<AgentResponse> {
    try {
      // Get the pending statement processing info
      const pendingInfo = this.pendingStatementProcessing[context.userId];
      
      if (!pendingInfo) {
        return {
          success: false,
          message: 'I don\'t have any pending statement information to set a starting balance.',
          data: { sources: [] }
        };
      }
      
      // Request GL account creation with starting balance
      const result = await this.requestGLAccountCreation(
        context,
        `Starting balance for ${pendingInfo.accountName}`,
        pendingInfo.accountCode,
        pendingInfo.balance,
        pendingInfo.statementDate
      );
      
      // Record that we've processed this statement
      await recordProcessedStatement(
        pendingInfo.accountId,
        pendingInfo.statementNumber,
        pendingInfo.statementDate,
        pendingInfo.lastFour,
        true, // This is a starting balance
        context.userId
      );
      
      // Clear the pending info
      delete this.pendingStatementProcessing[context.userId];
      
      return {
        success: true,
        message: `I've set the starting balance for account ${pendingInfo.accountName} to $${pendingInfo.balance.toFixed(2)} as of ${pendingInfo.statementDate}.`,
        data: { sources: [] }
      };
    } catch (error) {
      console.error('Error setting account starting balance:', error);
      return {
        success: false,
        message: 'I encountered an error while setting the starting balance. Please try again later.',
        data: { sources: [] }
      };
    }
  }
  
  /**
   * Request a GL account creation from the GL agent
   * This method can handle both general accounts (like bank accounts or credit cards)
   * and expense accounts for bills
   * 
   * @param context The agent context
   * @param accountNameOrDescription The name of the account or expense description
   * @param accountCodeOrExpenseType The code of the account or expense type
   * @param startingBalance Optional starting balance for the account
   * @param balanceDate Optional date for the starting balance
   * @param isExpenseAccount Whether this is an expense account (default: false)
   * @returns Promise with the response and possibly a new account ID
   */
  private async requestGLAccountCreation(
    context: AgentContext,
    accountNameOrDescription: string,
    accountCodeOrExpenseType?: string,
    startingBalance?: number,
    balanceDate?: string,
    isExpenseAccount: boolean = false
  ): Promise<{ success: boolean; message: string; accountId?: number }> {
    try {
      console.log(`[APAgent] Requesting GL account creation for ${accountNameOrDescription}`);
      
      // Handle expense accounts differently than general accounts
      if (isExpenseAccount) {
        // For expense accounts, use agent communication to request creation
        const message = await sendAgentMessage(
          this.id, // AP agent as sender
          'gl_agent', // GL agent as recipient
          'CREATE_GL_ACCOUNT', // Action
          {
            expenseDescription: accountNameOrDescription,
            expenseType: accountCodeOrExpenseType,
            suggestedName: accountNameOrDescription ? `${accountNameOrDescription} Expense` : 'New Expense Account',
            accountType: 'expense',
            startingBalance: startingBalance !== undefined ? startingBalance.toString() : undefined,
            balanceDate
          },
          context.userId || 'unknown',
          MessagePriority.HIGH,
          context.conversationId
        );
        
        // Log the request
        await logAuditEvent({
          user_id: context.userId || 'unknown',
          action_type: "GL_ACCOUNT_CREATION_REQUEST",
          entity_type: "AGENT_MESSAGE",
          entity_id: message.id,
          context: { 
            expenseDescription: accountNameOrDescription,
            expenseType: accountCodeOrExpenseType,
            messageId: message.id
          },
          status: "SUCCESS", // Using SUCCESS for the log entry since the request was sent successfully
          timestamp: new Date().toISOString()
        });
        
        return {
          success: true,
          message: `I've requested the creation of a new GL account for "${accountNameOrDescription}". The General Ledger agent will process this request.`
        };
      } else {
        // For general accounts (bank accounts, credit cards, etc.), use the API directly
        // Determine account type based on name (simplified logic)
        let accountType: 'asset' | 'liability' | 'equity' | 'revenue' | 'expense' = 'asset';
        
        // For bank accounts and credit cards, they're typically assets or liabilities
        const lowerName = accountNameOrDescription.toLowerCase();
        if (lowerName.includes('bank') || lowerName.includes('checking') || lowerName.includes('savings')) {
          accountType = 'asset';
        } else if (lowerName.includes('credit card') || lowerName.includes('loan') || lowerName.includes('debt')) {
          accountType = 'liability';
        }
        
        // Make API request to create the account
        const response = await fetch('/api/accounts/create-with-balance', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            name: accountNameOrDescription,
            code: accountCodeOrExpenseType,
            startingBalance: startingBalance,
            balanceDate: balanceDate || new Date().toISOString().split('T')[0],
            accountType: accountType,
            userId: context.userId
          }),
        });
        
        if (!response.ok) {
          const errorText = await response.text();
          throw new Error(`Failed to create account: ${errorText}`);
        }
        
        const result = await response.json();
        
        return {
          success: true,
          message: result.message || 'Account created successfully',
          accountId: result.account?.id
        };
      }
    } catch (error) {
      console.error('[APAgent] Error creating GL account:', error);
      return {
        success: false,
        message: `Error creating account: ${error instanceof Error ? error.message : String(error)}`
      };
    }
  }
  
  // The requestGLAccountCreation method has been merged with the implementation above
  
  /**
   * Find an appropriate expense account for a bill based on description
   * If no suitable account is found, request creation of a new one
   * @param context The agent context
   * @param description The expense description
   * @returns Promise with the account ID or null if not found
   */
  private async findOrRequestExpenseAccount(
    context: AgentContext,
    description: string
  ): Promise<{ accountId?: number; requestedCreation: boolean; message: string }> {
    try {
      console.log(`[APAgent] Finding expense account for: ${description}`);
      
      // Determine the expense type based on the description
      let expenseType = 'general';
      const lowerDesc = description?.toLowerCase() || '';
      
      if (lowerDesc.includes('office') || lowerDesc.includes('stationary') || lowerDesc.includes('supplies')) {
        expenseType = 'office_supplies';
      } else if (lowerDesc.includes('rent') || lowerDesc.includes('lease')) {
        expenseType = 'rent';
      } else if (lowerDesc.includes('utility') || lowerDesc.includes('electric') || lowerDesc.includes('water') || lowerDesc.includes('gas')) {
        expenseType = 'utilities';
      } else if (lowerDesc.includes('travel') || lowerDesc.includes('trip')) {
        expenseType = 'travel';
      } else if (lowerDesc.includes('meal') || lowerDesc.includes('food') || lowerDesc.includes('restaurant')) {
        expenseType = 'meals';
      }
      
      // Build a query based on the expense type
      let expenseQuery = '';
      const queryParams: any[] = [];
      
      switch (expenseType) {
        case 'office_supplies':
          expenseQuery = `
            SELECT id, name FROM accounts 
            WHERE (LOWER(name) LIKE '%office supplies%' OR LOWER(name) LIKE '%office expense%')
            AND LOWER(account_type) = 'expense'
            LIMIT 1
          `;
          break;
        case 'rent':
          expenseQuery = `
            SELECT id, name FROM accounts 
            WHERE (LOWER(name) LIKE '%rent%' OR LOWER(name) LIKE '%lease%')
            AND LOWER(account_type) = 'expense'
            LIMIT 1
          `;
          break;
        case 'utilities':
          expenseQuery = `
            SELECT id, name FROM accounts 
            WHERE (LOWER(name) LIKE '%utility%' OR LOWER(name) LIKE '%utilities%')
            AND LOWER(account_type) = 'expense'
            LIMIT 1
          `;
          break;
        case 'travel':
          expenseQuery = `
            SELECT id, name FROM accounts 
            WHERE (LOWER(name) LIKE '%travel%' OR LOWER(name) LIKE '%transportation%')
            AND LOWER(account_type) = 'expense'
            LIMIT 1
          `;
          break;
        case 'meals':
          expenseQuery = `
            SELECT id, name FROM accounts 
            WHERE (LOWER(name) LIKE '%meal%' OR LOWER(name) LIKE '%food%' OR LOWER(name) LIKE '%entertainment%')
            AND LOWER(account_type) = 'expense'
            LIMIT 1
          `;
          break;
        default:
          // For other descriptions, try to find a matching expense account
          if (description) {
            // Try to match words from the description
            const words = description.split(/\s+/).filter(word => word.length > 3);
            if (words.length > 0) {
              const likeConditions = words.map((_, i) => `LOWER(name) LIKE $${i + 1}`).join(' OR ');
              expenseQuery = `
                SELECT id, name FROM accounts 
                WHERE (${likeConditions})
                AND LOWER(account_type) = 'expense'
                LIMIT 1
              `;
              queryParams.push(...words.map(word => `%${word.toLowerCase()}%`));
            } else {
              // Fallback to general expense
              expenseQuery = `
                SELECT id, name FROM accounts 
                WHERE LOWER(name) LIKE '%expense%'
                AND LOWER(account_type) = 'expense'
                LIMIT 1
              `;
            }
          } else {
            // No description, use general expense
            expenseQuery = `
              SELECT id, name FROM accounts 
              WHERE LOWER(name) LIKE '%expense%'
              AND LOWER(account_type) = 'expense'
              LIMIT 1
            `;
          }
      }
      
      // Execute the query
      const expenseResult = queryParams.length > 0 
        ? await sql.query(expenseQuery, queryParams)
        : await sql.query(expenseQuery);
      
      if (expenseResult.rows.length > 0) {
        const account = expenseResult.rows[0];
        console.log(`[APAgent] Found matching expense account: ${account.name} (ID: ${account.id})`);
        return {
          accountId: account.id,
          requestedCreation: false,
          message: `Using expense account: ${account.name}`
        };
      }
      
      // If no specific account found, try a general expense account
      const generalExpenseQuery = `
        SELECT id, name FROM accounts 
        WHERE LOWER(account_type) = 'expense' 
        LIMIT 1
      `;
      const generalExpenseResult = await sql.query(generalExpenseQuery);
      
      if (generalExpenseResult.rows.length > 0) {
        const account = generalExpenseResult.rows[0];
        console.log(`[APAgent] Using general expense account: ${account.name} (ID: ${account.id})`);
        
        // Request a more specific account for future use
        const requestResult = await this.requestGLAccountCreation(context, description, expenseType);
        
        return {
          accountId: account.id,
          requestedCreation: true,
          message: `I couldn't find a specific expense account for "${description}", so I'm using a general expense account (${account.name}) for now. ${requestResult.message}`
        };
      }
      
      // If we still don't have an account, request one but use any account as fallback
      const anyAccountQuery = `SELECT id, name FROM accounts LIMIT 1`;
      const anyAccountResult = await sql.query(anyAccountQuery);
      
      if (anyAccountResult.rows.length === 0) {
        throw new Error('No accounts found in the database');
      }
      
      const account = anyAccountResult.rows[0];
      console.log(`[APAgent] Using fallback account: ${account.name} (ID: ${account.id})`);
      
      // Request a proper expense account
      const requestResult = await this.requestGLAccountCreation(context, description, expenseType);
      
      return {
        accountId: account.id,
        requestedCreation: true,
        message: `I couldn't find any expense accounts, so I'm using ${account.name} as a temporary solution. ${requestResult.message}`
      };
    } catch (error) {
      console.error('[APAgent] Error finding expense account:', error);
      return {
        requestedCreation: false,
        message: `Failed to find a suitable expense account: ${error instanceof Error ? error.message : 'Unknown error'}`
      };
    }
  }

  private async createBillWithInfo(context: AgentContext): Promise<AgentResponse> {
    try {
      // Check if we have pending bill creation info
      if (!this.pendingBillCreation || !this.pendingBillCreation.billInfo || !this.pendingBillCreation.vendorId) {
        return {
          success: false,
          message: "I don't have all the information needed to create a bill. Please provide vendor, amount, and bill number."
        };
      }
      
      const { billInfo, vendorId } = this.pendingBillCreation;
      console.log('[APAgent] Creating bill with info:', { billInfo, vendorId });
      
      // Prepare bill data
      const today = new Date();
      const formattedDate = `${today.getFullYear()}-${(today.getMonth() + 1).toString().padStart(2, '0')}-${today.getDate().toString().padStart(2, '0')}`;
      
      // Format due date if provided, otherwise use 30 days from now
      let dueDate = '';
      if (billInfo.due_date) {
        // Try to parse the due date into a standard format
        if (billInfo.due_date.includes('/')) {
          const [month, day, year] = billInfo.due_date.split('/');
          dueDate = `${year.length === 2 ? '20' + year : year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
        } else {
          dueDate = billInfo.due_date;
        }
      } else {
        // Default to 30 days from now
        const thirtyDaysLater = new Date(today);
        thirtyDaysLater.setDate(today.getDate() + 30);
        dueDate = `${thirtyDaysLater.getFullYear()}-${(thirtyDaysLater.getMonth() + 1).toString().padStart(2, '0')}-${thirtyDaysLater.getDate().toString().padStart(2, '0')}`;
      }
      
      // Get a valid AP account ID from database
      let apAccountId;
      try {
        // Try multiple approaches to find the Accounts Payable account
        // First try by account type and name pattern
        const apQuery = `
          SELECT id FROM accounts 
          WHERE LOWER(account_type) = 'liability' AND LOWER(name) LIKE '%accounts payable%' 
          AND user_id = ${context.userId || 'NULL'}
          ORDER BY id ASC
          LIMIT 1
        `;
        const apResult = await sql.query(apQuery);
        
        if (apResult.rows.length > 0) {
          apAccountId = apResult.rows[0].id;
          console.log(`[APAgent] Using Accounts Payable account ID: ${apAccountId}`);
        } else {
          // Try accounts with code 2000 (typical AP code)
          const apCodeQuery = `
            SELECT id FROM accounts 
            WHERE code = '2000' AND user_id = ${context.userId || 'NULL'}
            LIMIT 1
          `;
          const apCodeResult = await sql.query(apCodeQuery);
          
          if (apCodeResult.rows.length > 0) {
            apAccountId = apCodeResult.rows[0].id;
            console.log(`[APAgent] Using AP account with code 2000, ID: ${apAccountId}`);
          } else {
            // Try any liability account as fallback
            const liabilityQuery = `
              SELECT id FROM accounts 
              WHERE LOWER(account_type) = 'liability' AND user_id = ${context.userId || 'NULL'}
              ORDER BY id ASC
              LIMIT 1
            `;
            const liabilityResult = await sql.query(liabilityQuery);
            
            if (liabilityResult.rows.length > 0) {
              apAccountId = liabilityResult.rows[0].id;
              console.log(`[APAgent] Using fallback liability account ID: ${apAccountId}`);
            } else {
              // Last resort - use any account
              const anyAccountQuery = `SELECT id FROM accounts WHERE user_id = ${context.userId || 'NULL'} LIMIT 1`;
              const anyAccountResult = await sql.query(anyAccountQuery);
              
              if (anyAccountResult.rows.length === 0) {
                throw new Error('No accounts found in the database');
              }
              
              apAccountId = anyAccountResult.rows[0].id;
              console.log(`[APAgent] Using last resort fallback account ID: ${apAccountId}`);
            }
          }
        }
      } catch (err) {
        console.error('[APAgent] Error finding AP account:', err);
        throw new Error('Failed to find a valid account for AP');
      }
      
      // Determine payment terms from extracted data or default to Net 30
      let paymentTerms = 'Net 30';
      if (billInfo.terms) {
        paymentTerms = billInfo.terms;
      } else if (billInfo.payment_terms) {
        paymentTerms = billInfo.payment_terms;
      } else {
        // Try to infer payment terms from the due date if available
        if (billInfo.due_date) {
          // Calculate days between bill date and due date
          const billDate = new Date(formattedDate);
          const dueDateObj = new Date(dueDate);
          const daysDiff = Math.round((dueDateObj.getTime() - billDate.getTime()) / (1000 * 60 * 60 * 24));
          
          if (daysDiff === 15) {
            paymentTerms = 'Net 15';
          } else if (daysDiff === 30) {
            paymentTerms = 'Net 30';
          } else if (daysDiff === 45) {
            paymentTerms = 'Net 45';
          } else if (daysDiff === 60) {
            paymentTerms = 'Net 60';
          } else if (daysDiff === 90) {
            paymentTerms = 'Net 90';
          } else {
            paymentTerms = `Net ${daysDiff}`;
          }
        }
      }
      
      console.log(`[APAgent] Using payment terms: ${paymentTerms}`);
      
      // Create bill object with Open status by default
      const bill = {
        vendor_id: vendorId,
        bill_number: billInfo.bill_number,
        bill_date: formattedDate,
        due_date: dueDate,
        total_amount: billInfo.amount,
        status: 'Open', // Set status to Open so journal entries are created
        memo: billInfo.description,
        ap_account_id: apAccountId,
        terms: paymentTerms
      };
      
      // Find or request an appropriate expense account
      const expenseAccountResult = await this.findOrRequestExpenseAccount(context, billInfo.description || 'General Expense');
      
      if (!expenseAccountResult.accountId) {
        throw new Error('Failed to find a valid expense account: ' + expenseAccountResult.message);
      }
      
      const expenseAccountId = expenseAccountResult.accountId;
      
      // If we requested a new GL account creation, include that in the response message
      let accountRequestMessage = '';
      if (expenseAccountResult.requestedCreation) {
        accountRequestMessage = `\n\n${expenseAccountResult.message}`;
      }
      
      // Create default bill line
      const lines = [{
        expense_account_id: expenseAccountId.toString(), // Convert to string to match BillLine type
        description: billInfo.description || 'General expense',
        quantity: '1',
        unit_price: (billInfo.amount || 0).toString(),
        amount: (billInfo.amount || 0).toString(),
        category: '',
        location: '',
        funder: ''
      }];
      
      // Create bill in database
      try {
        // Log detailed information before attempting to create bill
        console.log('[APAgent] Attempting to create bill with the following data:');
        console.log('Bill:', JSON.stringify(bill, null, 2));
        console.log('Lines:', JSON.stringify(lines, null, 2));
        
        const createdBill = await createBill(bill, lines);
        console.log('[APAgent] Bill created successfully:', createdBill);
        
        // Log the successful bill creation
        await logAuditEvent({
          user_id: context.userId || 'unknown',
          action_type: "BILL_CREATION",
          entity_type: "BILL",
          entity_id: createdBill.id?.toString() || 'unknown',
          context: { 
            query: context.query, 
            billInfo, 
            vendorId, 
            billId: createdBill.id,
            requestedGLAccount: expenseAccountResult.requestedCreation
          },
          status: "SUCCESS",
          timestamp: new Date().toISOString()
        });
        
        // Clear the pending bill creation
        this.pendingBillCreation = null;
        
        return {
          success: true,
          message: `Bill #${createdBill.bill_number} for ${billInfo.amount} has been created successfully with Open status. A journal entry has been created for this bill.${accountRequestMessage}`
        };
      } catch (dbErr) {
        console.error('[APAgent] DB error creating bill. Full error:', dbErr);
        console.error('[APAgent] Error message:', dbErr instanceof Error ? dbErr.message : String(dbErr));
        console.error('[APAgent] Error stack:', dbErr instanceof Error ? dbErr.stack : 'No stack trace available');
        
        // Try to get more details if it's a database-specific error
        if (dbErr && typeof dbErr === 'object' && 'code' in dbErr) {
          console.error(`[APAgent] Database error code: ${(dbErr as any).code}`);
        }
        
        // Log failure
        await logAuditEvent({
          user_id: context.userId || 'unknown',
          action_type: "BILL_CREATION",
          entity_type: "BILL",
          entity_id: 'unknown',
          context: { query: context.query, bill, error: dbErr },
          status: "FAILURE",
          timestamp: new Date().toISOString()
        });
        
        return {
          success: false,
          message: 'Failed to create the bill due to a server error.'
        };
      }
    } catch (error) {
      console.error('[APAgent] Error in createBillWithInfo:', error);
      return {
        success: false,
        message: 'An error occurred while creating the bill. Please try again.'
      };
    }
  }

  /**
   * Uses the determine-payment-account API to select a payment account for a bill payment.
   * @param context The agent context.
   * @param userAccounts Array of available user accounts (for fallback).
   * @param paymentDescription Description of the payment.
   * @param vendorName Optional name of the vendor.
   * @returns Promise with the selected account ID and a message.
   */
  public async selectPaymentAccountWithAI(
    context: AgentContext,
    userAccounts: { id: number; name?: string; account_type?: string }[],
    paymentDescription: string,
    vendorName?: string
  ): Promise<{ accountId: number | undefined; message: string }> {
    console.log(`[APAgent.selectPaymentAccountWithAI] Selecting payment account for: ${paymentDescription}, vendor: ${vendorName || 'not specified'}`);
    
    // Basic validation
    if (!userAccounts || userAccounts.length === 0) {
      return {
        accountId: undefined,
        message: 'No payment accounts available to select from.',
      };
    }

    // If only one account, use it without calling the API
    if (userAccounts.length === 1) {
      return {
        accountId: userAccounts[0].id,
        message: `Selected the only available payment account: ${userAccounts[0].name || `ID ${userAccounts[0].id}`}.`,
      };
    }
    
    try {
      // Use our new determine-payment-account API
      const baseUrl = process.env.NEXT_PUBLIC_APP_URL || process.env.APP_URL || 'http://localhost:3000';
      const apiUrl = new URL('/api/ai/determine-payment-account', baseUrl).toString();
      
      console.log(`[APAgent.selectPaymentAccountWithAI] Calling API: ${apiUrl}`);
      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          ...(context.token && { 'Authorization': `Bearer ${context.token}` }),
        },
        body: JSON.stringify({
          paymentMethod: paymentDescription,
          billInfo: {
            vendorName,
            query: context.query
          }
        }),
      });
      
      if (!response.ok) {
        console.error(`[APAgent.selectPaymentAccountWithAI] API error: ${response.status}`);
        throw new Error(`API error: ${response.status}`);
      }
      
      const data = await response.json();
      console.log(`[APAgent.selectPaymentAccountWithAI] API response:`, data);
      
      if (data.accountId) {
        // Verify the account ID exists in our available accounts
        const isValidId = userAccounts.some(acc => acc.id === data.accountId);
        if (isValidId) {
          const chosenAccount = userAccounts.find(acc => acc.id === data.accountId);
          return {
            accountId: data.accountId,
            message: `Selected payment account: ${chosenAccount?.name || `ID ${data.accountId}`} (${data.message || 'via AI selection'})`
          };
        } else {
          console.warn(`[APAgent.selectPaymentAccountWithAI] API returned an invalid account ID: ${data.accountId}`);
          // Fall through to fallback
        }
      }
    } catch (error) {
      console.error('[APAgent.selectPaymentAccountWithAI] Error calling determine-payment-account API:', error);
      // Fall through to fallback logic
    }
    
    // Fallback logic if API call fails
    console.log('[APAgent.selectPaymentAccountWithAI] Using fallback logic to select payment account');
    
    // Look for bank or cash accounts
    const bankAccount = userAccounts.find(acc => 
      acc.account_type?.toLowerCase().includes('bank') || 
      acc.account_type?.toLowerCase().includes('cash') ||
      acc.name?.toLowerCase().includes('bank') ||
      acc.name?.toLowerCase().includes('cash') ||
      acc.name?.toLowerCase().includes('checking')
    );

    if (bankAccount) {
      return { 
        accountId: bankAccount.id, 
        message: `Selected ${bankAccount.name || 'payment account'} based on account type.` 
      };
    }

    // If no bank/cash account, just return the first account
    return { 
      accountId: userAccounts[0].id, 
      message: `Selected ${userAccounts[0].name || 'payment account'} as default.` 
    };
  }

/**
 * List available GL accounts with optional filtering
 * @param context The agent context
 * @param accountType Optional account type filter (e.g., 'expense', 'liability')
 * @returns Promise with the list of accounts
 */
private async listGLAccounts(context: AgentContext, accountType?: string): Promise<AgentResponse> {
  try {
    console.log(`[APAgent] Listing GL accounts${accountType ? ` of type ${accountType}` : ''}`);
    
    // Build the query based on filters
    let query = `
      SELECT id, code, name, account_type, is_active, parent_id 
      FROM accounts 
      WHERE user_id = ${context.userId || 'NULL'}`;
    
    // Add account type filter if specified
    if (accountType) {
      query += `
        AND LOWER(account_type) = LOWER('${accountType.replace(/'/g, "''")}')`;      
    }
    
    // Order by code for a logical presentation
    query += `
      ORDER BY code ASC`;
    
    const result = await sql.query(query);
    
    if (result.rows.length === 0) {
      return {
        success: true,
        message: `No${accountType ? ` ${accountType}` : ''} GL accounts found. You may need to create some accounts first.`,
        data: { accounts: [] }
      };
    }
    
    // Format accounts for display
    const accounts = result.rows.map((account: any) => ({
      id: account.id,
      code: account.code,
      name: account.name,
      type: account.account_type,
      isActive: account.is_active
    }));
    
    // Group accounts by type for better organization
    const accountsByType: Record<string, typeof accounts> = {};
    accounts.forEach((account: any) => {
      if (!accountsByType[account.type]) {
        accountsByType[account.type] = [];
      }
      accountsByType[account.type].push(account);
    });
    
    // Build a formatted message
    let message = `Here are the available${accountType ? ` ${accountType}` : ''} GL accounts:\n\n`;
    
    Object.entries(accountsByType).forEach(([type, typeAccounts]) => {
      message += `**${type} Accounts:**\n`;
      typeAccounts.forEach((account: any) => {
        message += `- ${account.code}: ${account.name}${!account.isActive ? ' (Inactive)' : ''}\n`;
      });
      message += '\n';
    });
    
    message += `Total: ${accounts.length} accounts found.`;
    
    return {
      success: true,
      message,
      data: { accounts }
    };
  } catch (error) {
    console.error('[APAgent] Error listing GL accounts:', error);
    return {
      success: false,
      message: `Error retrieving GL accounts: ${error instanceof Error ? error.message : String(error)}`
    };
  }
}

  private simplifyVendor(vendor: Vendor): Partial<Vendor> {
    return {
      id: vendor.id,
      name: vendor.name,
      contact_person: vendor.contact_person,
      email: vendor.email,
      phone: vendor.phone
    };
  }
  
  // This method has been merged with the implementation above
}
