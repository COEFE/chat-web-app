rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Match any document in the 'users' collection
    match /users/{userId} {
      // Allow reading/listing user documents
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Allow write operations on the user document itself
      allow write: if request.auth != null && request.auth.uid == userId;

      // Match the 'documents' subcollection within a user's path
      match /documents/{docId} {
        // Allow all operations if the user is authenticated and matches the userId
        allow read, write: if request.auth != null && request.auth.uid == userId;
        
        // Specific rules for messages subcollection (for chat history)
        match /messages/{messageId} {
          // Allow read if the user is authenticated and matches the userId
          allow read: if request.auth != null && request.auth.uid == userId;
          
          // Allow create if the user is authenticated, matches userId, and message has required fields
          allow create: if request.auth != null && 
                        request.auth.uid == userId && 
                        request.resource.data.keys().hasAll(['role', 'content', 'createdAt']);
          
          // Allow update/delete if user is authenticated and matches userId
          // Generally messages shouldn't be updated/deleted, but we'll allow it for admin purposes
          allow update, delete: if request.auth != null && request.auth.uid == userId;
        }
      }

      // Match the 'folders' subcollection within a user's path
      match /folders/{folderId} {
        // Allow all operations if the user is authenticated and matches the userId
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Allow access to all other subcollections under a user's document
      match /{allSubcollections=**} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Rules for the userFavorites collection
    match /userFavorites/{userId} {
      // Allow an authenticated user to read and write their own favorites document.
      // The document ID must match the user's UID.
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Rules for the email collection (used by Firebase Email Extension)
    // Note: There's a typo in the extension config, so we need to use 'emai_shares'
    match /emai_shares/{emailId} {
      // Allow authenticated users to create emails
      allow create: if request.auth != null;
      // Allow users to read their own emails
      allow read: if request.auth != null;
    }
    
    // Rules for email_templates collection
    match /email_templates/{templateId} {
      // Allow reading templates by any authenticated user
      allow read: if request.auth != null;
      // Only allow writes by admins (you'll need to implement admin role checking)
    }

    // Rules for shares collection
    match /shares/{shareId} {
      // Allow the creator to read/write their shares
      allow read, write: if request.auth != null && 
                          (request.resource.data.createdBy == request.auth.uid || 
                           resource.data.createdBy == request.auth.uid);
      // Allow anyone to read a share if it's public (no password)
      allow read: if resource.data.password == null || resource.data.password == "";
    }

    // Rules for documents collection
    match /documents/{documentId} {
      // Allow read if the user is authenticated
      allow read: if request.auth != null;
      // Allow write if the user is authenticated
      allow write: if request.auth != null;
    }

    // Rules for folders collection
    match /folders/{folderId} {
      // Allow read if the user is authenticated
      allow read: if request.auth != null;
      // Allow write if the user is authenticated
      allow write: if request.auth != null;
    }

    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}